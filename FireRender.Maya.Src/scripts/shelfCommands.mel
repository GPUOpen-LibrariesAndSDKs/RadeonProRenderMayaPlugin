//
// Copyright 2020 Advanced Micro Devices, Inc
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//    http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

source "fireRenderEnvironment.mel";

// Shelf Commands
// -----------------------------------------------------------------------------

global proc int checkPluginLoadedRPR()
{
	if (!`pluginInfo -query -loaded RadeonProRender`)
	{
		error("Radeon ProRender is not loaded, please load it in Plug-in Manager");
		return 0;
	}

	return 1;
}

global proc openSettingsTabRPR()
{
	if (!checkPluginLoadedRPR())
		return;

	// Open settings window, catch errors
	if (catch(eval("unifiedRenderGlobalsWindow")))
	{
		// Didn't open, try to recover
		print("Recovering RenderGlobalsWindow\n");
		deleteUI unifiedRenderGlobalsWindow;
		// And open again
		unifiedRenderGlobalsWindow;
	}
	setCurrentRenderer "FireRender";
	string $tabLayoutName = rendererTabLayoutName("FireRender");
	addRendererTabsToGlobalsWindow("FireRender");
	setCurrentTabInRenderGlobalsWindow("Radeon ProRender");
	fillSelectedTabForCurrentRenderer();
}

global proc startProductionRenderRPR()
{
	if (!checkPluginLoadedRPR())
		return;

	string $panel = `getPanel -withFocus`;
	string $cameraName = "persp";
	string $type = `getPanel -typeOf $panel`;
	if($type == "modelPanel")
	{
		$cameraName = `modelPanel -q -cam $panel`;
	}
	setCurrentRenderer "FireRender";
	RenderViewWindow;
	showWindow renderViewWindow;
	refresh;
	renderWindowRenderCamera redoPreviousRender renderView $cameraName;
}

global proc setRenderQualityRPR()
{
	if (!checkPluginLoadedRPR())
		return;

	print("Right click for render quality presets.");
}

global proc importMaterialRPR()
{
	if (!checkPluginLoadedRPR())
		return;

	int $importImages = importImagesEnabledRPR();

	string $filename[] = `fileDialog2 - fileMode 4 - okCaption "Import" -caption "Import Radeon ProRender Material" -fileFilter "XML Material Files (*.xml);;All Files (*.*)"`;
	for ($i = 0; $i < `size($filename)`; $i++)
	{
		RPRXMLImport - file $filename[$i];
	}
}

global proc exportMaterialRPR()
{
	if (!checkPluginLoadedRPR())
		return;

	string $res = `confirmDialog -title "Export Materials" -message "Which materials should be exported to Radeon ProRender XML format?" -button "Selected Only" -button "All" -button "Cancel" -defaultButton "Selected Only" -cancelButton "Cancel" -dismissString "Cancel"`;

	if ($res == "Cancel")
		return;

	string $filename[] = `fileDialog2 -fileMode 3 -caption "Export Radeon ProRender Material" `;

	for ($i = 0; $i < `size($filename)`; $i++)
	{
		if ($res == "All")
			RPRXMLExport -file $filename[$i];
		else
			RPRXMLExport -s -file $filename[$i];
	}
}

global proc onSqEx()
{
	intSliderGrp -edit -enable true sliderFirstFrameName;
	intSliderGrp -edit -enable true sliderLastFrameName;
	optionMenu -edit -enable true frameExtentionOption;
	attrControlGrp -edit -enable true extensionPaddingCtrlEx;
}

global proc offSqEx()
{
	intSliderGrp -edit -enable false sliderFirstFrameName;
	intSliderGrp -edit -enable false sliderLastFrameName;
	optionMenu -edit -enable false frameExtentionOption;
	attrControlGrp -edit -enable false extensionPaddingCtrlEx;
}

global proc launchSceneExport()
{
	string $basicFilter = "*.rpr;;All Files (*.*)";
	string $result[] = `fileDialog2 -fileFilter $basicFilter -dialogStyle 0`;

	$countPaths = size($result);

	if ($countPaths > 0)
	{
		$isSqExEnabled = `checkBox  -query -value exportSqCheckBx`;
		int $firstFrameIdx = `intSliderGrp -query -value sliderFirstFrameName`;
		int $lastFrameIdx = `intSliderGrp -query -value sliderLastFrameName`;
		$isSingleFileEnabled = `checkBox  -query -value singleFileCheckBx`;
		string $selectedOption = `optionMenu -query -value compressionOption`;
		string $namePattern = `optionMenu -query -value frameExtentionOption`;
		int $framePadding = `getAttr defaultRenderGlobals.extensionPadding`;
		string $selectedCam = `optionMenu -query -value selectedCamera`;

		catchQuiet ( `OxSetIsRendering(true)` );

		fireRenderExport 
			-scene 
			-file $result 
			-frames $isSqExEnabled $firstFrameIdx $lastFrameIdx $isSingleFileEnabled 
			-compress $selectedOption
			-padding $namePattern $framePadding
			-camera $selectedCam;

		catchQuiet ( `OxSetIsRendering(false)` );

	}

	deleteUI exWindow;
}

global proc sliderFirstFrameDragCallback()
{
	int $lastFrameIdx = `intSliderGrp -query -value sliderLastFrameName`;
	int $firstFrameIdx = `intSliderGrp -query -value sliderFirstFrameName`;

	if ($firstFrameIdx >= $lastFrameIdx)
	{
		intSliderGrp -edit -value ($firstFrameIdx+1) sliderLastFrameName;
	}
}

global proc sliderLastFrameDragCallback()
{
	int $lastFrameIdx = `intSliderGrp -query -value sliderLastFrameName`;
	int $firstFrameIdx = `intSliderGrp -query -value sliderFirstFrameName`;

	if ($lastFrameIdx <= $firstFrameIdx)
	{
		intSliderGrp -edit -value ($lastFrameIdx-1) sliderFirstFrameName;
	}
}

global proc sliderFirstFrameChangeCallback()
{
	sliderFirstFrameDragCallback();
}

global proc sliderLastFrameChangeCallback()
{
	sliderLastFrameDragCallback();
}

global proc exportSceneRPR()
{
	if (!checkPluginLoadedRPR())
		return;

	// Real maximum value that can be set forIntSlider is 0x7FFFFFFF (maximum 32-bit signed int)
	int $maxIntVal = 0x7FFFFFFF;

	window -title "RPR Scene Export" -width 350 -height 110 exWindow;
		columnLayout 
			-rowSpacing 5 
			-adjustableColumn true 
			-columnOffset "left" 10;
			
			intSliderGrp 
				-label "First Frame" 
				-field true 
				-minValue 1 
				-fieldMinValue 1 
				-maxValue 100 
				-fieldMaxValue $maxIntVal 
				-value 1 
				-enable false 
				-cw 1 70 
				-dragCommand sliderFirstFrameDragCallback 
				-cc sliderFirstFrameChangeCallback 
				sliderFirstFrameName;
				
			intSliderGrp 
				-label "Last Frame" 
				-field true 
				-minValue 1 
				-fieldMinValue 1 
				-maxValue 100 
				-fieldMaxValue $maxIntVal 
				-value 60 
				-enable false 
				-cw 1 70 
				-dragCommand sliderLastFrameDragCallback 
				-cc sliderLastFrameChangeCallback 
				sliderLastFrameName;
			
			optionMenu 
				-label "Frame Extention" 
				-enable false 
				frameExtentionOption;
			menuItem 
				-label (uiRes("m_createMayaSoftwareCommonGlobalsTab.kExt3")) 
				mayaSoftwareNameDotFrameDotExtension;
			menuItem 
				-label (uiRes("m_createMayaSoftwareCommonGlobalsTab.kExt4")) 
				mayaSoftwareNameDotExtensionDotFrame;
			menuItem 
				-label (uiRes("m_createMayaSoftwareCommonGlobalsTab.kExt5")) 
				mayaSoftwareNameDotFrame;
			menuItem 
				-label (uiRes("m_createMayaSoftwareCommonGlobalsTab.kExt6")) 
				mayaSoftwareFrameDotExtension;
			menuItem 
				-label (uiRes("m_createMayaSoftwareCommonGlobalsTab.kExt7")) 
				mayaSoftwareNameUnderFrameDotExtension;
			
			attrControlGrp
				-attribute defaultRenderGlobals.extensionPadding
				-label (uiRes("m_createMayaSoftwareCommonGlobalsTab.kFramePadding"))
				-hideMapButton true
				-enable false
				extensionPaddingCtrlEx;
				
			checkBox 
				-label "Enable Sequence Export" 
				-value false 
				-onCommand "onSqEx" 
				-offCommand "offSqEx" 
				exportSqCheckBx;
				
			checkBox 
				-label "Export As Single File" 
				-value false 
				singleFileCheckBx;

			optionMenu 
				-label "Compression" 
				compressionOption;
            menuItem 
				-label "None";
            menuItem 
				-label "Level 1";
            menuItem 
				-label "Level 2";
            menuItem
				-label "Level 3";
				
            optionMenu -e 
				-value "Level 1" 
				compressionOption;

			optionMenu 
				-label "Select Camera" 
				selectedCamera;

				$layers = `ls -type "renderLayer"`;
				for( $layer in $layers )
				{
					if (catch ( `editRenderLayerGlobals -currentRenderLayer $layer` ))
					{
						print("cant use layer ");
						print($layer);
					} else {
						string $camerasShapes[] = `ls -type camera`;
						string $cameras[] = `listRelatives -p $camerasShapes`;
						for ($camera in $cameras)
						{
							menuItem 
								-label $camera;
						}	
					}
				}

			columnLayout -columnOffset "left" 120;
				button -label "Launch Export" -command "launchSceneExport";

	showWindow;
}

global proc openMaterialLibraryRPR()
{
	print("openMaterialLibraryRPR called from shelf!\n");

	if (!checkPluginLoadedRPR())
		return;

	python("import fireRender.rpr_material_browser\nreload(fireRender.rpr_material_browser)\nfireRender.rpr_material_browser.show()");
}

global proc createSkyRPR()
{
	if (!checkPluginLoadedRPR())
		return;

	createSkyNodeRPR();
}

global proc createIBLRPR()
{
	if (!checkPluginLoadedRPR())
		return;

	createIBLNodeRPR();
}

global proc createAndAssignEmissiveRPR()
{
	if (!checkPluginLoadedRPR())
		return;

	// Get the selected object.
	string $selection[] = `ls -selection`;

	// Create the emissive material.
	string $createdMaterialName = `shadingNode -asShader "RPRMaterial"`;
	sets -renderable true -noSurfaceShader true -empty -name ($createdMaterialName + "SG");
	connectAttr -f ($createdMaterialName + ".outColor") ($createdMaterialName + "SG.surfaceShader");
	setAttr ($createdMaterialName + ".type") 6;

	// Reset the selection.
	int $numberOfItemsSelected = size($selection);

	if ($numberOfItemsSelected > 0)
		select -r $selection[0];

	int $i;
	for ($i = 1; $i < $numberOfItemsSelected;++$i)
	{
		string $item = $selection[$i];
		select -add $selection[$i];
	}

	// Assign material to the selected object.
	hyperShade -assign $createdMaterialName;
}

global proc createIESLight()
{
	if (!checkPluginLoadedRPR())
		return;

	shadingNode -asLight RPRIES;
}

global proc createPhysicalLight()
{
	if (!checkPluginLoadedRPR())
		return;
	
	shadingNode -asLight RPRPhysicalLight;
}

global proc createLightsSubmenuItems(string $parentMenu)
{
	menuItem -label "Create or Select a Sky Node" -p $parentMenu -c createSkyRPR;
	menuItem -label "Create or Select an IBL Node" -p $parentMenu -c createIBLRPR;
	menuItem -label "Create and Assign an Emissive Material to the Selected Object" -p $parentMenu -c createAndAssignEmissiveRPR;
	menuItem -label "Create IES light node" -p $parentMenu -c createIESLight;
	menuItem -label "Create physical light node" -p $parentMenu -c createPhysicalLight;
}

global proc createVolumeRPR()
{
	if (!checkPluginLoadedRPR())
		return;

	string $VolumeNode = `createNode RPRVolume -n RPRVolumeObj`;
	string $parent[] = `listRelatives -p $VolumeNode`;
	rename $parent[0] "RPRVolume#";
	rename $VolumeNode "RPRVolumeObj#";
}

global proc createVolumesSubmenuItems(string $parentMenu)
{
	menuItem -label "Create RPR Volume Node" -p $parentMenu -c createVolumeRPR;
}

global proc convertVRayObjects()
{
	if (!checkPluginLoadedRPR())
		return;

	string $sel[]  = `ls -sl`;
	string $res = "";

	if(size($sel)>0)
		$res = `confirmDialog -title "Convert VRay to Radeon Pro Render" -message "This operation will convert selected VRay materials and/or lights to Radeon Pro Render equivalents. Any unused converted VRay materials will be deleted. Rendering this scene with VRay will no longer produce the same results.\nDo you want to continue?" -button "Yes" -button "No" -defaultButton "No" -cancelButton "No" -dismissString "No"`;
	else
		$res = `confirmDialog -title "Convert VRay to Radeon Pro Render" -message "This operation will convert all VRay materials and/or lights in this scene to Radeon Pro Render equivalents. Any unused converted VRay materials will be deleted. Rendering this scene with VRay will no longer produce the same results.\nDo you want to continue?" -button "Yes" -button "No" -defaultButton "No" -cancelButton "No" -dismissString "No"`;

	if ($res == "No")
		return;

	$res = `fireRenderConvertVRay`;

	// Clean-up unused shaders:
	for ($material in `ls -materials`)
	{
		string $outputs[];
		string $SG[] = {};
		$outputs = stringArrayRemoveDuplicates(`listConnections -destination 1 $material`);
		for ($out in $outputs)
		{
			string $type = nodeType($out);
			if ($type == "shadingEngine") $SG[size($SG)] = $out;
		}

		if (size($SG) > 0)
		{
		if (size(`listConnections -source 1 ($SG[size($SG)-1] + ".dagSetMembers")`) == 0)
		{
			if($material!="lambert1" && $material!="particleCloud1" && $material!="shaderGlow1")
			{
				delete $material;
			}
		}
		}
	};

	// Now clean-up shading engines:
	string $shaderSG[] = `ls -type shadingEngine`;
	for($SG in $shaderSG)
	{
		//Get Shader Name
		string $sshader[] = `listConnections ($SG+".surfaceShader")`;
		string $vshader[] = `listConnections ($SG+".volumeShader")`;
		string $dshader[] = `listConnections ($SG+".displacementShader")`;
		if(size($sshader)==0 && size($vshader)==0 && size($vshader)==0)
		{
			delete $SG;
		}
};

	confirmDialog -message $res -title "Convert VRay to Radeon Pro Render" -button "OK" -defaultButton "OK" -cancelButton "OK" -dismissString "OK";
}

global proc openPluginInfoRPR()
{
	if (!checkPluginLoadedRPR())
		return;

	PluginManager;
	pluginWin;
	displayPluginInfo "RadeonProRender";
}


// Import File Dialog Procedures
// -----------------------------------------------------------------------------

global proc fileDialogUICreateRPR(string $parent)
{
	setParent $parent;
	$parent = `scrollLayout -childResizable true`;

	columnLayout -adj true;
	checkBox -label "Import images to project" importImagesCheckBox;
}

global proc fileDialogUIInitializeRPR(string $parent, string $filterType)
{
	setParent $parent;

	int $value = importImagesEnabledRPR();
	checkBox -edit -value $value importImagesCheckBox;
}

global proc fileDialogUICommitRPR(string $parent)
{
	setParent $parent;
	optionVar -intValue RPR_ImportMaterialImages `checkBox -q -value importImagesCheckBox`;
}

global proc int importImagesEnabledRPR()
{
	if (`optionVar -exists RPR_ImportMaterialImages`)
		return `optionVar -q RPR_ImportMaterialImages`;

	return 1;
}
