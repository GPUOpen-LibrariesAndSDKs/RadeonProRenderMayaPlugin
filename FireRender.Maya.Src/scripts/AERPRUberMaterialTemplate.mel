global proc AEUberCheckReflectMetalness(string $nodeName)
{
	string $nodeAttr = $nodeName + ".reflectMetalMaterial";
	int $value = `getAttr $nodeAttr`;
	editorTemplate -dimControl $nodeName "reflectMetalness" ($value == 0);

	string $nodeEnabledAttr = $nodeName + ".reflections";
	int $enabled = `getAttr $nodeEnabledAttr`;

	editorTemplate -dimControl $nodeName "reflectIOR" (($value == 1) || ($enabled == 0));
}

global proc AEUberCheckEnableDiffuse(string $nodeName)
{
	string $nodeAttr = $nodeName + ".diffuse";
	int $value = `getAttr $nodeAttr`;
	editorTemplate -dimControl $nodeName "diffuseColor" ($value == 0);
	editorTemplate -dimControl $nodeName "diffuseWeight" ($value == 0);
	editorTemplate -dimControl $nodeName "diffuseRoughness" ($value == 0);
	editorTemplate -dimControl $nodeName "useShaderNormal" ($value == 0);
	editorTemplate -dimControl $nodeName "diffuseNormal" ($value == 0);
	editorTemplate -dimControl $nodeName "backscatteringWeight" ($value == 0);
	editorTemplate -dimControl $nodeName "separateBackscatterColor" ($value == 0);
	editorTemplate -dimControl $nodeName "backscatteringColor" ($value == 0);

	AEUberCheckEnableDiffuseNormal($nodeName);
}

global proc AEUberCheckEnableDiffuseNormal(string $nodeName)
{
	string $nodeAttr = $nodeName + ".useShaderNormal";
	int $value = `getAttr $nodeAttr`;

	string $nodeEnabledAttr = $nodeName + ".diffuse";
	int $enabled = `getAttr $nodeEnabledAttr`;

	editorTemplate -dimControl $nodeName "diffuseNormal" (($value == 1) || ($enabled == 0));

	AEUberCheckEnableMasterNormal($nodeName);
}

global proc AEUberCheckEnableMasterNormal(string $nodeName)
{
	string $diffuseNormalEnable = $nodeName + ".useShaderNormal";
	int $denabled = `getAttr $diffuseNormalEnable`;
	string $diffuseOn = $nodeName + ".diffuse";
	int $dOn = `getAttr $diffuseOn`;
	string $reflectNormalEnable = $nodeName + ".reflectUseShaderNormal";
	int $rlenabled = `getAttr $reflectNormalEnable`;
	string $reflectOn = $nodeName + ".reflections";
	int $rlon = `getAttr $reflectOn`;
	string $refractNormalEnable = $nodeName + ".refractUseShaderNormal";
	int $rfenabled = `getAttr $refractNormalEnable`;
	string $refractOn = $nodeName + ".refraction";
	int $rfon = `getAttr $refractOn`;
	string $coatNormalEnable = $nodeName + ".coatUseShaderNormal";
	int $cenabled = `getAttr $coatNormalEnable`;
	string $coatOn = $nodeName + ".clearCoat";
	int $cton = `getAttr $coatOn`;

	int $diffuseDontUseMasterNormal = (($dOn == 0) || ($denabled == 0)); // .diffuse || .useShaderNormal
	int $reflectionDontUseMasterNormal = (($rlon == 0) || ($rlenabled == 0)); // .reflections || .reflectUseShaderNormal
	int $refractionDontUseMasterNormal = (($rfon == 0) || ($rfenabled == 0)); // .refraction || .refractUseShaderNormal
	int $coatingUseDontMasterNormal = (($cton == 0) || ($cenabled == 0 )); // .clearCoat || .coatUseShaderNormal
	int $shouldGrey = ($diffuseDontUseMasterNormal && $reflectionDontUseMasterNormal && $refractionDontUseMasterNormal && $coatingUseDontMasterNormal);
	editorTemplate -dimControl $nodeName "normalMapEnable" $shouldGrey;
	editorTemplate -dimControl $nodeName "normalMap" $shouldGrey;
}

global proc AEUberCheckEnableDiffuseBackscatter(string $nodeName)
{
	string $nodeAttr = $nodeName + ".separateBackscatterColor";
	int $value = `getAttr $nodeAttr`;
	editorTemplate -dimControl $nodeName "backscatteringColor" ($value == 0);
}

global proc AEUberCheckEnableReflection(string $nodeName)
{
	string $nodeAttr = $nodeName + ".reflections";
	int $value = `getAttr $nodeAttr`;
	editorTemplate -dimControl $nodeName "reflectColor" ($value == 0);
	editorTemplate -dimControl $nodeName "reflectWeight" ($value == 0);
	editorTemplate -dimControl $nodeName "reflectRoughness" ($value == 0);
	editorTemplate -dimControl $nodeName "reflectAnisotropy" ($value == 0);
	editorTemplate -dimControl $nodeName "reflectAnisotropyRotation" ($value == 0);
	editorTemplate -dimControl $nodeName "reflectIOR" ($value == 0);
	editorTemplate -dimControl $nodeName "reflectMetalness" ($value == 0);
	editorTemplate -dimControl $nodeName "reflectMetalMaterial" ($value == 0);
	editorTemplate -dimControl $nodeName "reflectUseShaderNormal" ($value == 0);

	AEUberCheckReflectMetalness($nodeName);
	AEUberCheckEnableReflectNormal($nodeName);
}

global proc AEUberCheckEnableReflectNormal(string $nodeName)
{
	string $nodeAttr = $nodeName + ".reflectUseShaderNormal";
	int $value = `getAttr $nodeAttr`;

	string $nodeEnabledAttr = $nodeName + ".reflections";
	int $enabled = `getAttr $nodeEnabledAttr`;

	editorTemplate -dimControl $nodeName "reflectNormal" (($value == 1) || ($enabled == 0));

	AEUberCheckEnableMasterNormal($nodeName);
}

global proc AEUberCheckEnableRefraction(string $nodeName)
{
	string $nodeAttr = $nodeName + ".refraction";
	int $value = `getAttr $nodeAttr`;
	editorTemplate -dimControl $nodeName "refractColor" ($value == 0);
	editorTemplate -dimControl $nodeName "refractWeight" ($value == 0);
	editorTemplate -dimControl $nodeName "refractRoughness" ($value == 0);
	editorTemplate -dimControl $nodeName "refractIor" ($value == 0);
	editorTemplate -dimControl $nodeName "refractLinkToReflect" ($value == 0);
	editorTemplate -dimControl $nodeName "refractThinSurface" ($value == 0);
	editorTemplate -dimControl $nodeName "refractAbsorptionDistance" ($value == 0);
	editorTemplate -dimControl $nodeName "refractAbsorbColor" ($value == 0);
	editorTemplate -dimControl $nodeName "refractAllowCaustics" ($value == 0);
	editorTemplate -dimControl $nodeName "refractUseShaderNormal" ($value == 0);

	AEUberCheckLinkRefl($nodeName);
	AEUberCheckEnableRefractNormal($nodeName);
}

global proc AEUberCheckEnableRefractNormal(string $nodeName)
{
	string $nodeAttr = $nodeName + ".refractUseShaderNormal";
	int $value = `getAttr $nodeAttr`;

	string $nodeEnabledAttr = $nodeName + ".refraction";
	int $enabled = `getAttr $nodeEnabledAttr`;

	editorTemplate -dimControl $nodeName "refractNormal" (($value == 1) || ($enabled == 0));

	AEUberCheckEnableMasterNormal($nodeName);
}

global proc AEUberCheckEnableCoating(string $nodeName)
{
	string $nodeAttr = $nodeName + ".clearCoat";
	int $value = `getAttr $nodeAttr`;
	editorTemplate -dimControl $nodeName "coatColor" ($value == 0);
	editorTemplate -dimControl $nodeName "coatWeight" ($value == 0);
	editorTemplate -dimControl $nodeName "coatRoughness" ($value == 0);
	editorTemplate -dimControl $nodeName "coatIor" ($value == 0);
	editorTemplate -dimControl $nodeName "coatUseShaderNormal" ($value == 0);
	editorTemplate -dimControl $nodeName "coatNormal" ($value == 0);
	editorTemplate -dimControl $nodeName "coatThickness" ($value == 0);
	editorTemplate -dimControl $nodeName "coatTransmissionColor" ($value == 0);
	AEUberCheckEnableCoatNormal($nodeName);
}

global proc AEUberCheckEnableCoatNormal(string $nodeName)
{
	string $nodeAttr = $nodeName + ".coatUseShaderNormal";
	int $value = `getAttr $nodeAttr`;

	string $nodeEnabledAttr = $nodeName + ".clearCoat";
	int $enabled = `getAttr $nodeEnabledAttr`;

	editorTemplate -dimControl $nodeName "coatNormal" (($value == 1) || ($enabled == 0));

	AEUberCheckEnableMasterNormal($nodeName);
}

global proc AEUberCheckEnableEmissive(string $nodeName)
{
	string $nodeAttr = $nodeName + ".emissive";
	int $value = `getAttr $nodeAttr`;
	editorTemplate -dimControl $nodeName "emissiveColor" ($value == 0);
	editorTemplate -dimControl $nodeName "emissiveWeight" ($value == 0);
	editorTemplate -dimControl $nodeName "emissiveIntensity" ($value == 0);
	editorTemplate -dimControl $nodeName "emissiveDoubleSided" ($value == 0);
}

global proc AEUberCheckEnableSSS(string $nodeName)
{
	string $nodeAttr = $nodeName + ".sssEnable";
	int $value = `getAttr $nodeAttr`;

	string $nodeEnabledAttr = $nodeName + ".sssUseDiffuseColor";
	int $enabled = `getAttr $nodeEnabledAttr`;

	editorTemplate -dimControl $nodeName "volumeScatter" (($value == 0) || ($enabled == 1));

	editorTemplate -dimControl $nodeName "sssUseDiffuseColor" ($value == 0);
	editorTemplate -dimControl $nodeName "sssWeight" ($value == 0);
	editorTemplate -dimControl $nodeName "subsurfaceRadius" ($value == 0);
	editorTemplate -dimControl $nodeName "scatteringDirection" ($value == 0);
	editorTemplate -dimControl $nodeName "multipleScattering" ($value == 0);
}

global proc AEUberCheckUseTransparency(string $nodeName)
{
	string $nodeAttr = $nodeName + ".transparencyEnable";
	int $value = `getAttr $nodeAttr`;
	editorTemplate -dimControl $nodeName "transparencyLevel" ($value == 0);
}

global proc AEUberCheckUseNormalMap(string $nodeName)
{
	string $nodeAttr = $nodeName + ".normalMapEnable";
	int $value = `getAttr $nodeAttr`;
	editorTemplate -dimControl $nodeName "normalMap" ($value == 0);
}

global proc AEUberCheckUseDisplacement(string $nodeName)
{
	string $nodeAttr = $nodeName + ".displacementEnable";
	int $value = `getAttr $nodeAttr`;
	editorTemplate -dimControl $nodeName "displacementMap" ($value == 0);
	editorTemplate -dimControl $nodeName "displacementMin" ($value == 0);
	editorTemplate -dimControl $nodeName "displacementMax" ($value == 0);
	editorTemplate -dimControl $nodeName "displacementEnableAdaptiveSubdiv" ($value == 0);
	editorTemplate -dimControl $nodeName "displacementSubdiv" ($value == 0);
	editorTemplate -dimControl $nodeName "displacementASubdivFactor" ($value == 0);
	editorTemplate -dimControl $nodeName "displacementCreaseWeight" ($value == 0);
	editorTemplate -dimControl $nodeName "displacementBoundary" ($value == 0);
	AEUberCheckUseAdaptiveSubdiv($nodeName);
}

global proc AEUberCheckUseAdaptiveSubdiv(string $nodeName)
{
	string $nodeAttr = $nodeName + ".displacementEnableAdaptiveSubdiv";
	int $value = `getAttr $nodeAttr`;

	string $nodeEnabledAttr = $nodeName + ".displacementEnable";
	int $enabled = `getAttr $nodeEnabledAttr`;

	editorTemplate -dimControl $nodeName "displacementASubdivFactor" (($value == 0) || ($enabled == 0)); 
	editorTemplate -dimControl $nodeName "displacementSubdiv" (($value == 1) || ($enabled == 0));
}

global proc AEUberCheckCoatMetalness(string $nodeName)
{
	string $nodeAttr = $nodeName + ".coatMetalMaterial";
	int $value = `getAttr $nodeAttr`;
	editorTemplate -dimControl $nodeName "coatMetalness" ($value == 0);
	editorTemplate -dimControl $nodeName "coatIOR" ($value == 1);
}

global proc AEUberCheckLinkRefl(string $nodeName)
{
	string $nodeAttr = $nodeName + ".refractLinkToReflect";
	int $value = `getAttr $nodeAttr`;

	// disable refraction IOR control when needed
	string $nodeEnabledAttr = $nodeName + ".refraction";
	int $enabled = `getAttr $nodeEnabledAttr`;
	editorTemplate -dimControl $nodeName "refractIor" (($value == 1) || ($enabled == 0));

	// when just enabling link, copy IOR from reflection to refraction
	if ($value) AEUberCheckReflIOR($nodeName);
}

global proc AEUberCheckReflIOR(string $nodeName)
{
	string $nodeAttr = $nodeName + ".refractLinkToReflect";
	if (`getAttr $nodeAttr` == 1)
	{
		// copy IOR value from reflection to refraction
		// note: everything will work even without copying, this is just for more clean appearance
		string $reflectIOR_attr = $nodeName + ".reflectIOR";
		float $ior = `getAttr $reflectIOR_attr`;
		setAttr ($nodeName + ".refractIor") $ior;
	}
}

global proc AEUberCheckUseSssDiffuse(string $nodeName)
{
	string $nodeAttr = $nodeName + ".sssUseDiffuseColor";
	int $value = `getAttr $nodeAttr`;

	string $nodeEnabledAttr = $nodeName + ".sssEnable";
	int $enabled = `getAttr $nodeEnabledAttr`;

	// disable refraction IOR control when needed
	editorTemplate -dimControl $nodeName "volumeScatter" (($value == 1) || ($enabled == 0));
}

global proc AERPRUberMaterialTemplateNew(string $nodeName)
{
	AEswatchDisplay $nodeName;
	editorTemplate -beginScrollLayout;

	editorTemplate -beginLayout "Diffuse" -collapse 0;
		editorTemplate -label "Enable" -addControl "diffuse" "AEUberCheckEnableDiffuse";
		editorTemplate -label "Color" -addControl "diffuseColor";
		editorTemplate -label "Weight" -addControl "diffuseWeight";
		editorTemplate -label "Roughness" -addControl "diffuseRoughness";
		editorTemplate -label "Use Shader Normal" -addControl "useShaderNormal" "AEUberCheckEnableDiffuseNormal";
		editorTemplate -label "Diffuse Normal" -addControl "diffuseNormal";
		editorTemplate -label "Backscattering Weight" -addControl "backscatteringWeight";
		editorTemplate -label "Separate Backscatter color" -addControl "separateBackscatterColor" "AEUberCheckEnableDiffuseBackscatter";
		editorTemplate -label "Backscattering Color" -addControl "backscatteringColor";
	editorTemplate -endLayout;

	editorTemplate -beginLayout "Reflection" -collapse 0;
		editorTemplate -label "Enable" -addControl "reflections" "AEUberCheckEnableReflection";
		editorTemplate -label "Color" -addControl "reflectColor";
		editorTemplate -label "Weight" -addControl "reflectWeight";
		editorTemplate -label "Roughness" -addControl "reflectRoughness";
		editorTemplate -label "Anisotropy" -addControl "reflectAnisotropy";
		editorTemplate -label "Anisotropy Rotation" -addControl "reflectAnisotropyRotation";
		editorTemplate -label "Use Shader Normal" -addControl "reflectUseShaderNormal" "AEUberCheckEnableReflectNormal";
		editorTemplate -label "Reflection Normal" -addControl "reflectNormal";
		editorTemplate -beginLayout "Reflection Fresnel" -collapse 0;
			editorTemplate -label "Metal Material" -addControl "reflectMetalMaterial" "AEUberCheckReflectMetalness";
			editorTemplate -label "IOR" -addControl "reflectIOR" "AEUberCheckReflIOR";
			editorTemplate -label "Frensel Approximation On" -addControl "reflectIsFrenselApproximationOn" "AEUberCheckReflIOR";
			editorTemplate -label "Metalness" -addControl "reflectMetalness";
		editorTemplate -endLayout;
	editorTemplate -endLayout;

	editorTemplate -beginLayout "Refraction" -collapse 0;
		editorTemplate -label "Enable" -addControl "refraction" "AEUberCheckEnableRefraction";
		editorTemplate -label "Color" -addControl "refractColor";
		editorTemplate -label "Weight" -addControl "refractWeight";
		editorTemplate -label "Roughness" -addControl "refractRoughness";
		editorTemplate -label "Use Shader Normal" -addControl "refractUseShaderNormal" "AEUberCheckEnableRefractNormal";
		editorTemplate -label "Refraction Normal" -addControl "refractNormal";
		editorTemplate -label "Link to Reflection" -addControl "refractLinkToReflect" "AEUberCheckLinkRefl";
		editorTemplate -label "IOR" -addControl "refractIor";
		editorTemplate -label "Thin Surface" -addControl "refractThinSurface";
		editorTemplate -label "Absorption Distance" -addControl "refractAbsorptionDistance";
		editorTemplate -label "Absorption Color" -addControl "refractAbsorbColor";
		editorTemplate -label "Allow Caustics" -addControl "refractAllowCaustics";
	editorTemplate -endLayout;

	editorTemplate -beginLayout "Coating" -collapse 0;
		editorTemplate -label "Enable" -addControl "clearCoat" "AEUberCheckEnableCoating";
		editorTemplate -label "Color" -addControl "coatColor";
		editorTemplate -label "Weight" -addControl "coatWeight";
		editorTemplate -label "Roughness" -addControl "coatRoughness";

		editorTemplate -label "IOR" -addControl "coatIor";
		editorTemplate -label "Use Shader Normal" -addControl "coatUseShaderNormal" "AEUberCheckEnableCoatNormal";
		editorTemplate -label "Normal" -addControl "coatNormal";

		editorTemplate -label "Thickness" -addControl "coatThickness";
		editorTemplate -label "Transmission Color" -addControl "coatTransmissionColor";
	editorTemplate -endLayout;

	editorTemplate -beginLayout "Emissive" -collapse 0;
		editorTemplate -label "Enable" -addControl "emissive" "AEUberCheckEnableEmissive";
		editorTemplate -label "Weight" -addControl "emissiveWeight";
		editorTemplate -label "Color" -addControl "emissiveColor";
		editorTemplate -label "Intensity" -addControl "emissiveIntensity";
		editorTemplate -label "Double Sided" -addControl "emissiveDoubleSided";
	editorTemplate -endLayout;

	editorTemplate -beginLayout "Subsurface" -collapse 0;
		editorTemplate -label "Enable" -addControl "sssEnable" "AEUberCheckEnableSSS";
		editorTemplate -label "Weight" -addControl "sssWeight";
		editorTemplate -label "Use Diffuse Color" -addControl "sssUseDiffuseColor" "AEUberCheckUseSssDiffuse";
		editorTemplate -label "Scattering Color" -addControl "volumeScatter";
		editorTemplate -addControl "subsurfaceRadius";
		editorTemplate -addControl "scatteringDirection";
		editorTemplate -addControl "multipleScattering";
	editorTemplate -endLayout;

	editorTemplate -beginLayout "Material Settings" -collapse 0;
		editorTemplate -label "Use Transparency" -addControl "transparencyEnable" "AEUberCheckUseTransparency";
		editorTemplate -label "Transparency" -addControl "transparencyLevel";
		editorTemplate -label "Use Normal Map" -addControl "normalMapEnable" "AEUberCheckUseNormalMap";
		editorTemplate -label "Normal Map" -addControl "normalMap";
		editorTemplate -label "Use Displacement" -addControl "displacementEnable" "AEUberCheckUseDisplacement";
		editorTemplate -label "Displacement Map" -addControl "displacementMap";
		editorTemplate -label "Displacement min value" -addControl "displacementMin";
		editorTemplate -label "Displacement max value" -addControl "displacementMax";
		editorTemplate -label "Use Adaptive Subdivision" -addControl "displacementEnableAdaptiveSubdiv" "AEUberCheckUseAdaptiveSubdiv";
		editorTemplate -label "Subdivision" -addControl "displacementSubdiv";
		editorTemplate -label "Adaptive Subdiv Factor" -addControl "displacementASubdivFactor";
		editorTemplate -label "Crease Weight" -addControl "displacementCreaseWeight";
		editorTemplate -label "Boundary" -addControl "displacementBoundary";
	editorTemplate -endLayout;

//	editorTemplate -addControl "Caustics/Shadows";

	AEdependNodeTemplate $nodeName;

	editorTemplate -addExtraControls;
	editorTemplate -endScrollLayout;
}

global proc AERPRUberMaterialTemplateOld(string $nodeName)
{
	AEswatchDisplay $nodeName;
	editorTemplate -beginScrollLayout;

	editorTemplate -beginLayout "Diffuse Base" -collapse 0;
		editorTemplate -addControl "diffuseColor";
		editorTemplate -addControl "diffuseNormal";
	editorTemplate -endLayout;

	editorTemplate -beginLayout "Glossy Reflections" -collapse 0;
		editorTemplate -addControl "reflections";
		editorTemplate -addControl "reflectColor";
		editorTemplate -addControl "reflectIOR";
		editorTemplate -addControl "reflectRotation";
		editorTemplate -addControl "reflectRoughnessX";
		editorTemplate -addControl "reflectRoughnessY";
		editorTemplate -addControl "reflectNormal";
	editorTemplate -endLayout;

	editorTemplate -beginLayout "Clear Coat" -collapse 0;
		editorTemplate -addControl "clearCoat";
		editorTemplate -addControl "coatColor";
		editorTemplate -addControl "coatIOR";
		editorTemplate -addControl "coatNormal";
	editorTemplate -endLayout;

	editorTemplate -beginLayout "Refraction" -collapse 0;
		editorTemplate -addControl "refractWeight";
		editorTemplate -addControl "refractColor";
		editorTemplate -addControl "refractIor";
		editorTemplate -addControl "refractRoughness";
		editorTemplate -addControl "refNormal";
	editorTemplate -endLayout;

	editorTemplate -beginLayout "Transparency" -collapse 0;
		editorTemplate -addControl "transparencyLevel";
		editorTemplate -addControl "transparencyColor";
	editorTemplate -endLayout;

	editorTemplate -beginLayout "Volume" -collapse 0;
		editorTemplate -addControl "enableVolume";
		editorTemplate -addControl "volumeScatter";
		editorTemplate -addControl "volumeTransmission";
		editorTemplate -addControl "volumeEmission";
		editorTemplate -addControl "volumeDensity";
		//editorTemplate -addControl "volumeEmissionMultiplier";
		editorTemplate -addControl "scatteringDirection";
		editorTemplate -addControl "multipleScattering";
	editorTemplate -endLayout;

	editorTemplate -beginLayout "Displacement" -collapse 0;
		editorTemplate -addControl "displacementMap";
	editorTemplate -endLayout;

	editorTemplate -addControl "Caustics/Shadows";

	AEdependNodeTemplate $nodeName;

	editorTemplate -addExtraControls;
	editorTemplate -endScrollLayout;
}

global proc AERPRUberMaterialTemplate(string $nodeName)
{
	// Use old template when plugin compiled without new code (should remove this part when conversion to new UberMaterial will be finished)
	if (`attributeQuery -node $nodeName -ex "materialVersion"`)
	{
		AERPRUberMaterialTemplateNew($nodeName);
	}
	else
	{
		AERPRUberMaterialTemplateOld($nodeName);
	}
}
