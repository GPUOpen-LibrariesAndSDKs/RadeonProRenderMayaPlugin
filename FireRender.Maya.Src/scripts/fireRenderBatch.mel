//
// Copyright 2020 Advanced Micro Devices, Inc
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//    http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

global proc fireRenderBatchRender(string $option)
{
	if( ! `pluginInfo -q -l "RadeonProRender"` )
	{
		loadPlugin "RadeonProRender";
	}

	string $batchCmd = "fireRender -batch " + $option;

	print($batchCmd + "\n");
	eval $batchCmd;
}

global proc fireRenderCmdlineRender(string $option)
{
	fireRenderBatchRender($option);
}

global proc string fireRenderBatchRenderOptionsString()
{
	// This is batch related function which gets executed in main Maya's process.
	// This is the only place I found where we can save prefs (optionvars) before batch render starts in a separate child process.
	// Without doing this batch render might take incorrect hardware setup if such hardware setup was changed during the current Maya's session
	savePrefs -general;

	int $frCommandPort = 0;
	int $i = 0;
	for ($i = 9000; $i<9200; $i++)
	{
		if (`commandPort -q -n (":" + $i)` == 0)
		{
			commandPort -n (":" + $i);
		}
		if (`commandPort -q -n (":" + $i)` == 0)
		{
			continue;
		}
		else
		{
			$frCommandPort = $i;
			break;
		}
	}
	return " -r FireRender -port " + $frCommandPort;
}

global proc fireRenderShowLog()
{

}

global proc int fireRenderSequence(int $width, int $height, string $camera, string $saveToRenderView)
{
    string $curRenderer = currentRenderer();
    string $rendererUIName = `renderer -query -rendererUIName $curRenderer`;

    string $renderCommand = `renderer -query -renderProcedure $curRenderer`;
    
    string $renderViewPanelName;
    string $allPanels[] = `getPanel -scriptType renderWindowPanel`;
    if (size($allPanels) > 0) 
    {
        $renderViewPanelName = $allPanels[0];
    } 

    int $animation = `getAttr defaultRenderGlobals.animation`;
    float $startFrame = `getAttr defaultRenderGlobals.startFrame`;
    float $endFrame = `getAttr defaultRenderGlobals.endFrame`;
    float $byFrame = `getAttr defaultRenderGlobals.byFrameStep`;
    float $currentime = `currentTime -q`;
    if (!$animation)
    {
        $startFrame = $currentime;
        $endFrame = $currentime;
        $byFrame = 1;
    }

    int $padding = `getAttr defaultRenderGlobals.extensionPadding`;
    int $maxPaddingFrame = pow(10, $padding) - 1;

    string $renderlayer = `editRenderLayerGlobals -q -currentRenderLayer`;
    string $layerDisplayName = `renderLayerDisplayName $renderlayer`;

    string $cameras[];
    if ($camera != "") 
    {
        $cameras[0] = $camera;
    } 
    else 
    {
        $cameras = getRenderableCameras();
    }

    if (size($cameras) == 0) 
    {
        error("No cameras found !");
        return 1;
    }

    string $extraOptions = "-wfi";

    int $numberOfFrames = ceil(($endFrame - $startFrame + 1.0) / $byFrame);
    int $curFrame = 1;

    string $outputFormatString = "Frame to render: ^1s (^2s/^3s)  Camera: ^4s  Layer: ^5s\n";

    for ($time = $startFrame; $time <= $endFrame; $time += $byFrame)
    {
        currentTime $time;

        for ($cam in $cameras)
        {
            // Execute render command
            string $args = `format -s $width -s $height -s $cam -s $extraOptions "(^1s, ^2s, 1, 1, \"^3s\", \"^4s\")"`;
            string $cmd = $renderCommand + $args;
	
            // print current data
            print (`format -s $time -s $curFrame -s $numberOfFrames -s $cam -s $layerDisplayName $outputFormatString`);

            float $startTime = `timerX`;

            eval($cmd);

            if ($saveToRenderView == "all" || $saveToRenderView == $cam)
            {
                float $renderTime = `timerX -startTime $startTime`;
                string $windowCaption = renderWindowCaption("", $renderTime);
                renderWindowEditor -edit -pca $windowCaption $renderViewPanelName;

                renderWindowMenuCommand("keepImageInRenderView", $renderViewPanelName);
            }
        }

        $curFrame += 1;
    }

    return 0;
}
