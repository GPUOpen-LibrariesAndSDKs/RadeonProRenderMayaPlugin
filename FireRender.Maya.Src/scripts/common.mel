//
// Copyright 2020 Advanced Micro Devices, Inc
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//    http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

global proc string getRPRPluginName()
{
	return "Radeon ProRender";
}

global proc string getRPRPluginVersion()
{
	return `pluginInfo -query -version RadeonProRender`;
}

global string $rprCoreVersion;
global string $rifVersion;

global proc setRprCoreVersion(string $rcv)
{
	global string $rprCoreVersion;
	
	$rprCoreVersion = $rcv;
}

global proc string getRprCoreVersion()
{
	global string $rprCoreVersion;

	return $rprCoreVersion;
}

global proc setRifVersion(string $rv)
{
	global string $rifVersion;
	$rifVersion = $rv;
}

global proc string getRifVersion()
{
	global string $rifVersion;
	return $rifVersion;
}

global proc string getRPRNodePrefix()
{
	return "RPR";
}

global proc int getNumberOfCachedShaders(string $folderPath)
{
	string $result[] = `getFileList -folder $folderPath -filespec "*.bin"`;
	return size($result);
}

global proc rprExportsGLTF(int $enable)
{
	eval("fireRender -exportsGLTF " + $enable);
}

global proc int isRenderSelectedObjectsOnlyFlagSet()
{
	return `optionVar -q renderViewRenderSelectedObj`;
}

global proc checkRPRGlobalsNode()
{
    string $arr[] = `ls -type RadeonProRenderGlobals`;
    $count = size($arr);

    if ($count == 0)
    { 
        createNode -n RadeonProRenderGlobals -ss RadeonProRenderGlobals; 
    } 
}

global int $mlDenoiserSupportedCPU;
global proc setMlDenoiserSupportedCPU(int $value)
{
	global int $mlDenoiserSupportedCPU;
	$mlDenoiserSupportedCPU = $value;
}
global proc int getMlDenoiserSupportedCPU()
{
	global int $mlDenoiserSupportedCPU;
	return $mlDenoiserSupportedCPU;
}

global proc string hasGivenMeshDeformerOrRigAttached(string $mesh)
{
	string $historyNodes[] = `listHistory $mesh`;

	string $result[] = `ls -type geometryFilter $historyNodes`;

	if (size($result) > 0)
	{
		return string(size($result));
	}

	string $supportedNodes[] = `ls -nodeTypes`;
	if (stringArrayContains("AlembicNode", $supportedNodes))
	{
		string $resultAlembic[] = `ls -type AlembicNode $historyNodes`;

		if (size($resultAlembic) > 0)
		{
			return string(size($resultAlembic));
		}	
	}

	return "0";
}
