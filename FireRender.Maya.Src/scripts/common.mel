//
// Copyright 2020 Advanced Micro Devices, Inc
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//    http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

global proc string getRPRPluginName()
{
	return "Radeon ProRender";
}

global proc string getRPRPluginVersion()
{
	return `pluginInfo -query -version RadeonProRender`;
}

global string $rprCoreVersion;
global string $rifVersion;
global string $currentWorkingUnits;

global proc setRprCoreVersion(string $rcv)
{
	global string $rprCoreVersion;
	
	$rprCoreVersion = $rcv;
}

global proc string getRprCoreVersion()
{
	global string $rprCoreVersion;

	return $rprCoreVersion;
}

global proc setRifVersion(string $rv)
{
	global string $rifVersion;
	$rifVersion = $rv;
}

global proc string getRifVersion()
{
	global string $rifVersion;
	return $rifVersion;
}

global proc string getRPRNodePrefix()
{
	return "RPR";
}

global proc int getNumberOfCachedShaders(string $folderPath)
{
	string $result[] = `getFileList -folder $folderPath -filespec "*.bin"`;
	return size($result);
}

global proc rprExportsGLTF(int $enable)
{
	eval("fireRender -exportsGLTF " + $enable);
}

global proc int isRenderSelectedObjectsOnlyFlagSet()
{
	return `optionVar -q renderViewRenderSelectedObj`;
}

global proc checkRPRGlobalsNode()
{
    string $arr[] = `ls -type RadeonProRenderGlobals`;
    $count = size($arr);

    if ($count == 0)
    { 
        createNode -n RadeonProRenderGlobals -ss RadeonProRenderGlobals; 
    } 
	
	checkMattePassAOV();
}

proc float getWorkingUnitCoeff(string $workingUnit)
{
    if ($workingUnit == "m")
        return 1.0;
    else if ($workingUnit == "mm")
        return 0.001;
    else if ($workingUnit == "cm")
        return 0.01;
    else if ($workingUnit == "in")
        return 0.0254;
    else if ($workingUnit == "ft")
        return 0.3048;
    else if ($workingUnit == "yd")
        return 0.9144;	
    else 
    {
        print ("Unknown working unit" + $workingUnit);
    }

    return 1.0;
}

global proc workingUnitsChanged()
{
    global string $currentWorkingUnits;

    float $coeff = getWorkingUnitCoeff($currentWorkingUnits);
    $currentWorkingUnits = `currentUnit -q -l`;
    $coeff = $coeff / getWorkingUnitCoeff($currentWorkingUnits);
    
    string $attributesToChange[];
    int $i = 0;

    $attributesToChange[$i++] = "RadeonProRenderGlobals.raycastEpsilon";
    $attributesToChange[$i++] = "RadeonProRenderGlobals.fogDistance";
    $attributesToChange[$i++] = "RadeonProRenderGlobals.fogHeight";
    $attributesToChange[$i++] = "RadeonProRenderGlobals.deepEXRMergeZThreshold";

    string $materials[] = `ls -type RPRUberMaterial`;

    for ($index = 0; $index < size($materials); $index++)
    {
        $nodeName = $materials[$index];
        $attributesToChange[$i++] = $nodeName +"." + "refractAbsorptionDistance";
        $attributesToChange[$i++] = $nodeName +"." + "displacementMin";
        $attributesToChange[$i++] = $nodeName +"." + "displacementMax";
        $attributesToChange[$i++] = $nodeName +"." + "subsurfaceRadius";
    }

    for ($index = 0; $index < size($attributesToChange); $index++)
    {
        $attrName = $attributesToChange[$index];

        if (`getAttr -type $attrName` == "float")
        {
            $value = `getAttr $attrName` * $coeff;
            setAttr $attrName $value;        
        }
        else if (`getAttr -type $attrName` == "float3")
        {
            float $float3Value[] = `getAttr $attrName`;
            setAttr $attrName ($float3Value[0] * $coeff) ($float3Value[1] * $coeff) ($float3Value[2] * $coeff);        
        }
    }
}

global proc workingUnitsScriptJobSetup()
{
    global string $currentWorkingUnits;

    scriptJob -e "linearUnitChanged" "workingUnitsChanged();" -killWithScene;
    $currentWorkingUnits = `currentUnit -q -l`;
}

global int $mlDenoiserSupportedCPU;
global proc setMlDenoiserSupportedCPU(int $value)
{
	global int $mlDenoiserSupportedCPU;
	$mlDenoiserSupportedCPU = $value;
}
global proc int getMlDenoiserSupportedCPU()
{
	global int $mlDenoiserSupportedCPU;
	return $mlDenoiserSupportedCPU;
}

global proc string hasGivenMeshDeformerOrRigAttached(string $mesh)
{
	string $historyNodes[] = `listHistory $mesh`;

	string $result[] = `ls -type geometryFilter $historyNodes`;

	if (size($result) > 0)
	{
		return string(size($result));
	}                

	string $supportedNodes[] = `ls -nodeTypes`;
	if (stringArrayContains("AlembicNode", $supportedNodes))
	{
		string $resultAlembic[] = `ls -type AlembicNode $historyNodes`;

		if (size($resultAlembic) > 0)
		{
			return string(size($resultAlembic));
		}	
	}

	return "0";
}

// can be used to provide compatibility with old sc scenes
global proc checkMattePassAOV()
{
	int $isShadowCatcher = `getAttr RadeonProRenderGlobals.aovShadowCatcher`;
	int $isMattePass = `getAttr RadeonProRenderGlobals.aovMattePass`;
	
	if($isShadowCatcher == 1 && $isMattePass == 0)
	{
		setAttr RadeonProRenderGlobals.aovMattePass -lock 1 1;
	}
}

// Set dafault values for ramp when there is only one point, sits at the beggining and is black
// Maya creates exactly that as default value for ramp so this will break if they change it
// also works if nothing is created
global proc AERPRCreateDefaultRampColors( string $nodeName, string $colorSrcString, string $posSrcString, string $rampName)
{
	// trim $nodeName and $rampName. we have to do it since for some reason when we pass strings to this function
	// "nodeName#." is added to the beginning of each string
	// other strings will be trimmed later
	string $tmpStringArray[];

	$tmpStringArray = stringToStringArray($nodeName, ".");
	$nodeName =	$tmpStringArray[0];
	$tmpStringArray = stringToStringArray($rampName, "|");
	$rampName = $tmpStringArray[1];

	if(!RPRShouldProceed($nodeName, $rampName))
	{
		return;
	}

	// get values of the first point
	float $pos     = `getAttr ($nodeName + "." + $rampName + "[0]." + $rampName + "_Position")`;
	float $color[] = `getAttr ($nodeName + "." + $rampName + "[0]." + $rampName + "_Color")`;

	// change this to match what Maya creates as default value for ramp
	// proceed if the point sits at the beggining and is black
	if($pos      != 0.0 ||
	   $color[0] != 0.0 ||
	   $color[1] != 0.0 || 
	   $color[2] != 0.0)
	{
		return;
	}

	// for some reason we are unable to pass an array with callCustom
	// so we have to pass it as a string and then assemble the array
	float $colorSrc[] = RPRPrepareArray($colorSrcString);
	float $posSrc[]   = RPRPrepareArray($posSrcString);

	// set default values
	int $pointIdx;
	for ($pointIdx = 0; $pointIdx < size($posSrc); $pointIdx++)
	{
		int $row = $pointIdx * 3;
		setAttr ($nodeName + "."+ $rampName + "[" + $pointIdx + "]." + $rampName + "_Color") -type double3 $colorSrc[$row] $colorSrc[$row + 1] $colorSrc[$row + 2];
		setAttr ($nodeName + "."+ $rampName + "[" + $pointIdx + "]." + $rampName + "_Position") $posSrc[$pointIdx];
		setAttr ($nodeName + "."+ $rampName + "[" + $pointIdx + "]." + $rampName + "_Interp") 1;
	}		
}

global proc AERPRCreateDefaultRampFloats( string $nodeName, string $floatSrcString, string $posSrcString, string $rampName)
{
	// trim $nodeName and $rampName. we have to do it since for some reason when we pass strings to this function
	// "nodeName#." is added to the beginning of each string
	// other strings will be trimmed later
	string $tmpStringArray[];

	$tmpStringArray = stringToStringArray($nodeName, ".");
	$nodeName =	$tmpStringArray[0];
	$tmpStringArray = stringToStringArray($rampName, "|");
	$rampName = $tmpStringArray[1];

	if(!RPRShouldProceed($nodeName, $rampName))
	{
		return;
	}

	// get values of the first point
	float $pos = `getAttr ($nodeName + "." + $rampName + "[0]." + $rampName + "_Position")`;
	float $val = `getAttr ($nodeName + "." + $rampName + "[0]." + $rampName + "_FloatValue")`;

	// change this to match what Maya creates as default value for ramp
	// proceed if the point sits at the beggining and is black
	if($pos != 0.0 ||
	   $val != 0.0)
	{
		return;
	}

	// for some reason we are unable to pass an array with callCustom
	// so we have to pass it as a string and then assemble the array
	float $floatSrc[] = RPRPrepareArray($floatSrcString);
	float $posSrc[]   = RPRPrepareArray($posSrcString);

	// set default values
	int $pointIdx;
	for ($pointIdx = 0; $pointIdx < size($posSrc); $pointIdx++)
	{
		setAttr ($nodeName + "."+ $rampName + "[" + $pointIdx + "]." + $rampName + "_FloatValue") $floatSrc[$pointIdx];
		setAttr ($nodeName + "."+ $rampName + "[" + $pointIdx + "]." + $rampName + "_Position") $posSrc[$pointIdx];
		setAttr ($nodeName + "."+ $rampName + "[" + $pointIdx + "]." + $rampName + "_Interp") 1;
	}		
}

global proc float[] RPRPrepareArray(string $sourceString)
{
	// remove node name
	string $tmpStringArray[] = stringToStringArray($sourceString, "|");
	$sourceString = $tmpStringArray[1];

	// get values as strings
	$tmpStringArray = stringToStringArray($sourceString, ", ");
	
	// cast strings to floats
	float $res[];
	for ($i = 0; $i < size($tmpStringArray); $i++)
	{
		$res[$i] = $tmpStringArray[$i];
	}
	return $res;
}

global proc int RPRShouldProceed(string $nodeName, string $rampName)
{
	// get the number of points
	int $countCtrlPoints = `getAttr -s ($nodeName + "." + $rampName)`;

	// proceed only if there is one or 0 points
	if($countCtrlPoints > 1) 
	{
		return 0;
	}

	int $id[] = `getAttr -mi ($nodeName + "." + $rampName)`;

	if($countCtrlPoints == 0) 
	{
		// force default if maya did not create anything
		return 1;
	}
	
	if(size($id) == 0)
	{
		print("Error. At least one point in ramp " + $nodeName + " but size is 0");
		return 0;
	}

	// if you had points 0, 1, 2, then delete 0 you would expect to have 0, 1
	// but for whatever reason in maya there will be 1, 2
	// so we get a list of all elements and check the first one.
	// Proceed only if it is zero

	// yes, if the user has only one point with index 0, sets it to beginning and color to black we will set the default values. Too bad!

	if($id[0] != 0)
	{
		return 0;
	}

	return 1;
}
