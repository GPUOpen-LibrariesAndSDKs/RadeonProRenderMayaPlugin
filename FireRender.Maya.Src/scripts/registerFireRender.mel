//
// Copyright 2020 Advanced Micro Devices, Inc
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//    http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

source "createFireRenderCommonGlobalsTab.mel";
// This include needed to provide Maya access to all tab creation function
// If we skip this only "Radeon ProRender" tab will work, since it's creation function has same name as the name of mel file with that function
source "createFireRenderGlobalsTab.mel";
source "fireRenderIpr.mel";
source "fireRenderBatch.mel";
source "fireRenderUpdateAE.mel";
source "common.mel";
source "SystemTab.mel";
source "RenderSamplingTab.mel";
source "RenderQualityTab.mel";
source "RenderEffectsTab.mel";
source "rprCmdRenderUtils.mel";

// Override Maya's default implementation for setting up render
// settings tabs. This is required because Maya does not automatically
// create the first render settings tab for a 3rd party renderer.
proc overrideUnifiedRenderGlobalsWindow()
{
	int $mayaVersion=`about -apiVersion`;

	if ($mayaVersion >= 202200)
		eval("source \"rprUnifiedRenderGlobalsWindow202200.mel\"");
	else if ($mayaVersion >= 202000)
		eval("source \"rprUnifiedRenderGlobalsWindow202000.mel\"");
	else if ($mayaVersion >= 201900)
		eval("source \"rprUnifiedRenderGlobalsWindow201900.mel\"");
}

global proc registerFireRender(int $mlDenoiserSupportedCPU)
{
	setMlDenoiserSupportedCPU($mlDenoiserSupportedCPU);

	string $currentRendererName = getRPRPluginName();

	renderer -rendererUIName $currentRendererName
			-renderProcedure "fireRenderCmd"
			-renderRegionProcedure		 "mayaRenderRegion"
			-iprRenderProcedure         "fireRenderIprRender"
			-iprOptionsProcedure         "fireRenderIprOptionsWindow"
			-isRunningIprProcedure       "fireRenderIsRunningIpr"
			-startIprRenderProcedure     "fireRenderStartIprRender"
			-stopIprRenderProcedure      "fireRenderStopIprRender"
			-refreshIprRenderProcedure   "fireRenderRefreshIpr"
			-pauseIprRenderProcedure     "fireRenderPauseIprRender"
			-changeIprRegionProcedure    "fireRenderChangeIprRegion"
            -renderSequenceProcedure     "fireRenderSequence"
			-commandRenderProcedure      "fireRenderCmdlineRender"
			-batchRenderProcedure        "fireRenderBatchRender"
			-batchRenderOptionsStringProcedure        "fireRenderBatchRenderOptionsString"
			-showBatchRenderLogProcedure "fireRenderShowLog"
			-cancelBatchRenderProcedure  "batchRender"
			-showBatchRenderProcedure    "batchRender -showImage true"
			-logoImageName              "amd.xpm"
			FireRender;

	renderer -edit -addGlobalsNode "RadeonProRenderGlobals" FireRender;
	renderer -edit -addGlobalsNode "defaultRenderGlobals" FireRender;
	renderer -edit -addGlobalsNode "defaultResolution" FireRender;

	renderer -edit -addGlobalsTab "Common" "createFireRenderCommonGlobalsTab" "updateFireRenderCommonGlobalsTab" FireRender;
	renderer -edit -addGlobalsTab  "System" "createSystemTab" "updateSystemTab" FireRender;
	renderer -edit -addGlobalsTab  "Sampling" "createRenderSamplingTab" "updateRenderSamplingTab" FireRender;
	renderer -edit -addGlobalsTab  "Quality" "createQualityTab" "updateQualityTab" FireRender;
	renderer -edit -addGlobalsTab  "Effects" "createRenderEffectsTab" "updateRenderEffectsTab" FireRender;
	renderer -edit -addGlobalsTab  "AOVs" "createFireRenderAOVsTab" "updateFireRenderGlobalsTab" FireRender;

	// These will update Attribute Editor when the selection is changed.
	scriptJob -event "SelectionChanged" "fireRenderUpdateAE";
	scriptJob -event "constructionHistoryChanged" "fireRenderUpdateAE";

	// Ensure any saved IBL and Sky nodes are not linked to
	// RPR globals, as this means that the RPR globals node
	// is deleted if the IBL or Sky node is deleted.
	scriptJob -event "SceneOpened" cleanEnvironmentNodesRPR;

	fireRenderUpdateAE();

	overrideUnifiedRenderGlobalsWindow();
}

global proc string fireRenderCmd(int $resolution0, int $resolution1,
								   int $doShadows, int $doGlowPass, string $camera, string $option)
{
	print(getRPRPluginName() + " command " + $resolution0 + " " + $resolution1 + " " + $doShadows + " "+ $doGlowPass + " "+ $camera+ " "+  $option+"\n");
	string $cmd = "fireRender -w " + $resolution0 + " -h " + $resolution1 + " -cam " + $camera + " " + $option;
	eval($cmd);
	string $result = "";
	return $result;
}

//////////////////////////////////////////////////
global proc RPR_setAllowUncertified(int $allow){
	int $exists = `checkBox -exists "ctrlAllowUncertified"`;
	if ($exists){
		//createFireRenderGlobalsTab.mel has been loaded
		if ($allow){
			checkBox
				-e
				-v 1
				ctrlAllowUncertified;
		}else{
			checkBox
				-e
				-v 0
				ctrlAllowUncertified;
		}

		deviceTypeChangedUI();
	}else{
		//createFireRenderGlobalsTab.mel has NOT been loaded yet.
		optionVar -iv RPR_AllowUncertified $allow;
	}
}

global proc RPR_setGLInteropEnabled(int $enabled){
	int $exists = `checkBox -exists "checkBox_GLInterop"`;

	int $deviceSelectedExists = `optionVar -ex "RPR_DevicesSelected"`;

	if ($deviceSelectedExists == 0){
		print("CPU selected!\nGLInterop setting is only active if Graphics Card is selected.\n");
	}else{
		int $devSelected[] = `optionVar -q "RPR_DevicesSelected"`;

		if (size($devSelected) == 0 || $devSelected[0]==0){
			print("CPU selected!\nGLInterop setting is only active if Graphics Card is selected.\n");
		}
	}

	optionVar -iv RPR_GLInteropEnabled $enabled;

	if ($exists){
		deviceTypeChangedUI();
	}
}

global proc RPR_setDeviceActive(int $device, int $activate){
	string $ctrlName = "checkBox_Device" + ($device - 1);
	if ($device == 0){
		$ctrlName = "checkBox_ResourcesCPU";
	}

	int $exists = `checkBox -exists $ctrlName`;

	int $deviceSelectedExists = `optionVar -ex "RPR_DevicesSelected"`;
	int $currActive = 0;

	if ($deviceSelectedExists){
		int $devSelected[] = `optionVar -q "RPR_DevicesSelected"`;

		for( $i=0; $i<size($devSelected); ++$i ){
			if ($devSelected[$i] == $device){
				$currActive = 1;
			}
		}
	}

	if ($exists){
		checkBox
			-e
			-v $activate
			$ctrlName
			;

		deviceTypeChangedUI();
	}else{
		if ($activate){
			if ($currActive == 0){
				optionVar -iva "RPR_DevicesSelected" $device;
			}
		}else{
			if ($currActive == 1){
				if ($currActive == 1){
					//wanting to set CPU
					optionVar -rm "RPR_DevicesSelected";
				}else{
					optionVar -removeFromArray "RPR_DevicesSelected" $device;
				}
			}
		}
	}
}
