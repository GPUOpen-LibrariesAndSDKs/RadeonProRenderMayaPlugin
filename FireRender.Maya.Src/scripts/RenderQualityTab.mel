//
// Copyright 2020 Advanced Micro Devices, Inc
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//    http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

proc int isWindowsRunning()
{
	return `about -windows`;
}

global proc UpdateProductionRenderSettingsUI()
{
	int $type = `getAttr RadeonProRenderGlobals.renderQualityFinalRender`;
	int $isHybrid = $type != 0;

	frameLayout -edit -enable ($isHybrid) fireRenderProductionRenderHybridParams;

	int $isTileRenderEnabled = `getAttr RadeonProRenderGlobals.tileRenderEnabled`;
	attrControlGrp -edit -enable ($isTileRenderEnabled == false) finalRenderRestirControl;
}

// fsr and denoiser should be both off or both on
global proc OnFinalRenderFSRChanged()
{
	UpdateFinalRenderDenoiserFSRUI(1);
}

global proc OnFinalRenderDenoiserChanged()
{
	UpdateFinalRenderDenoiserFSRUI(0);
}

global proc UpdateFinalRenderFSRUI()
{
    int $denoiserType = `getAttr RadeonProRenderGlobals.finalRender_ptDenoiser`;
    int $isDenoiserEnabled = $denoiserType != 0;

	int $fsrType = `getAttr RadeonProRenderGlobals.finalRender_FSR`;
    int $isFSREnabled = $fsrType != 0;

	// change fsr
	if ($isDenoiserEnabled) 
	{
		// fsr enabled -> no need to change
		if($isFSREnabled)
		{
			return;
		}
	    setAttr "RadeonProRenderGlobals.finalRender_FSR" 3;
	} else {
	    setAttr "RadeonProRenderGlobals.finalRender_FSR" 0;
	}
	
	// Set the flag to indicate that we are changing attributes
    setAttr "RadeonProRenderGlobals.finalRenderDenoiserFsrFlag" 1;
}

global proc UpdateFinalRenderDenoiserUI()
{
    int $denoiserType = `getAttr RadeonProRenderGlobals.finalRender_ptDenoiser`;
    int $isDenoiserEnabled = $denoiserType != 0;

	int $fsrType = `getAttr RadeonProRenderGlobals.finalRender_FSR`;
    int $isFSREnabled = $fsrType != 0;

	// change denoiser
	if ($isFSREnabled) 
	{
		// denoiser enabled -> no need to change
		if ($isDenoiserEnabled)
		{
			return;
		}

	    setAttr "RadeonProRenderGlobals.finalRender_ptDenoiser" 1;
	} else {
	    setAttr "RadeonProRenderGlobals.finalRender_ptDenoiser" 0;
	}
	
	// Set the flag to indicate that we are changing attributes
    setAttr "RadeonProRenderGlobals.finalRenderDenoiserFsrFlag" 1;
}

global proc UpdateFinalRenderDenoiserFSRUI(int $isCalledFromFsr)
{
    // Check if a flag is set to prevent infinite loop
    int $flag = `getAttr "RadeonProRenderGlobals.finalRenderDenoiserFsrFlag"`;
    if ($flag == 1) {
		// Reset the flag after attribute change
		setAttr "RadeonProRenderGlobals.finalRenderDenoiserFsrFlag" 0;
        return;
    }
	
	if ($isCalledFromFsr)
	{
		UpdateFinalRenderDenoiserUI();
	} else {
		UpdateFinalRenderFSRUI();
	}
}

proc createFinalRenderQualityPart()
{
	// Render Resources section
	//
	if (isWindowsRunning())
	{
	string $visScrpt = "int $isFinal = 1; onRenderQualityChanged($isFinal);";

		frameLayout -label "Final Render Quality" -cll true -cl 0 fireRenderQualityFrame;
		attrControlGrp
			-label "Render Quality"
			-attribute "RadeonProRenderGlobals.renderQualityFinalRender"
			-cc UpdateProductionRenderSettingsUI;
			
		setParent ..;
	}


	frameLayout -label "Final Render Ray Depths" -cll true -cl 0 fireRenderRayDepthsFrame;

	// Trace depth
	attrControlGrp
		 -label "Max Ray Depth"
		 -attribute "RadeonProRenderGlobals.maxRayDepth";

	attrControlGrp
		 -label "Max Diffuse"
		 -attribute "RadeonProRenderGlobals.maxDepthDiffuse";

	attrControlGrp
		 -label "Max Glossy"
		 -attribute "RadeonProRenderGlobals.maxDepthGlossy";

	attrControlGrp
		 -label "Max Refraction"
		 -attribute "RadeonProRenderGlobals.maxDepthRefraction";

	attrControlGrp
		 -label "Max Glossy Refraction"
		 -attribute "RadeonProRenderGlobals.maxDepthRefractionGlossy";

	attrControlGrp
		 -label "Max Shadow"
		 -attribute "RadeonProRenderGlobals.maxDepthShadow";

	setParent ..;

	// Advanced settings section
	frameLayout -label "Final Render Advanced Settings" -cll true -cl 0 fireRenderQualityAdvancedFrame;

	attrControlGrp
		-label "Ray Epsilon(0.1 scene units)"
		-attribute "RadeonProRenderGlobals.raycastEpsilon";

        attrControlGrp
            -label "Enable Out of Core Textures"
            -attribute "RadeonProRenderGlobals.enableOOC"
            -cc updateOOCUIProduction;

        attrControlGrp
            -label "GPU Texture Cache (MB)"
            -attribute "RadeonProRenderGlobals.textureCacheSize"
            textureCacheSize;

	// Clamp irradiance
	attrControlGrp
		 -label "Clamp Irradiance"
		 -attribute "RadeonProRenderGlobals.giClampIrradiance";

	// Clamp irradiance value
	attrControlGrp
		 -label "Clamp Irradiance Value"
		 -attribute "RadeonProRenderGlobals.giClampIrradianceValue";

	attrControlGrp
		 -label "Texture Compression"
		 -attribute "RadeonProRenderGlobals.textureCompression";

	setParent ..;

	frameLayout -label "Final Render Advanced Hybrid Params" -cll true -cl 0 fireRenderProductionRenderHybridParams;

	    attrControlGrp
	        -label "Pt Denoiser"
	        -attribute "RadeonProRenderGlobals.finalRender_ptDenoiser"
			-cc OnFinalRenderDenoiserChanged
			finalRenderPtDenoiser;

	   attrControlGrp
	        -label "FSR"
	        -attribute "RadeonProRenderGlobals.finalRender_FSR"
			-cc OnFinalRenderFSRChanged
			finalRenderFSRControl;

	    attrControlGrp
	        -label "Material Cache"
	        -attribute "RadeonProRenderGlobals.finalRender_materialCache";

	    //attrControlGrp
	    //    -label "RestirGI"
	    //    -attribute "RadeonProRenderGlobals.finalRender_restirGI";
		
	    attrControlGrp
	        -label "Restir"
			-en 0
	        -attribute "RadeonProRenderGlobals.finalRender_reservoirSampling"
			finalRenderRestirControl;
		
			attrControlGrp
			    -label "Spatial Resample Iterations"
			    -attribute "RadeonProRenderGlobals.finalRender_restirSpatialResampleIterations";
		
			attrControlGrp
			    -label "Max Reservoirs Per Cell"
			    -attribute "RadeonProRenderGlobals.finalRender_restirMaxReservoirsPerCell";
		
		frameLayout -label "GMON" -cll false -cl 0;
			attrControlGrp
			    -label "Enable"
			    -attribute "RadeonProRenderGlobals.finalRender_useGmon";
   
			attrControlGrp
			    -label "GINI Coefficient"
			    -attribute "RadeonProRenderGlobals.finalRender_giniCoeffGmon";
		setParent ..;
		setParent ..;
	
	UpdateProductionRenderSettingsUI();
}

global proc UpdateViewportSettingsUI()
{
	int $type = `getAttr RadeonProRenderGlobals.renderQualityViewport`;
	int $isHybrid = $type != 4;

	frameLayout -edit -enable ($isHybrid) fireRenderViewportHybridParams;

	int $isTileRenderEnabled = `getAttr RadeonProRenderGlobals.tileRenderEnabled`;
	attrControlGrp -edit -enable ($isTileRenderEnabled == false) viewportRestirControl;
}

// fsr and denoiser should be both off or both on
global proc OnViewportFSRChanged()
{
	UpdateViewportDenoiserFSRUI(1);
}

global proc OnViewportDenoiserChanged()
{
	UpdateViewportDenoiserFSRUI(0);
}

global proc UpdateViewportFSRUI()
{
    int $denoiserType = `getAttr RadeonProRenderGlobals.ptDenoiser`;
    int $isDenoiserEnabled = $denoiserType != 0;

	int $fsrType = `getAttr RadeonProRenderGlobals.FSR`;
    int $isFSREnabled = $fsrType != 0;

	// change fsr
	if ($isDenoiserEnabled) 
	{
		// fsr enabled -> no need to change
		if($isFSREnabled)
		{
			return;
		}
	    setAttr "RadeonProRenderGlobals.FSR" 3;
	} else {
	    setAttr "RadeonProRenderGlobals.FSR" 0;
	}
	
	// Set the flag to indicate that we are changing attributes
    setAttr "RadeonProRenderGlobals.viewportRenderDenoiserFsrFlag" 1;
}

global proc UpdateViewportDenoiserUI()
{
    int $denoiserType = `getAttr RadeonProRenderGlobals.ptDenoiser`;
    int $isDenoiserEnabled = $denoiserType != 0;

	int $fsrType = `getAttr RadeonProRenderGlobals.FSR`;
    int $isFSREnabled = $fsrType != 0;

	// change denoiser
	if ($isFSREnabled) 
	{
		// denoiser enabled -> no need to change
		if ($isDenoiserEnabled)
		{
			return;
		}

	    setAttr "RadeonProRenderGlobals.ptDenoiser" 1;
	} else {
	    setAttr "RadeonProRenderGlobals.ptDenoiser" 0;
	}
	
	// Set the flag to indicate that we are changing attributes
    setAttr "RadeonProRenderGlobals.viewportRenderDenoiserFsrFlag" 1;
}

global proc UpdateViewportDenoiserFSRUI(int $isCalledFromFsr)
{
    // Check if a flag is set to prevent infinite loop
    int $flag = `getAttr "RadeonProRenderGlobals.viewportRenderDenoiserFsrFlag"`;
    if ($flag == 1) {
		// Reset the flag after attribute change
		setAttr "RadeonProRenderGlobals.viewportRenderDenoiserFsrFlag" 0;
        return;
    }
	
	if ($isCalledFromFsr)
	{
		UpdateViewportDenoiserUI();
	} else {
		UpdateViewportFSRUI();
	}
}

proc createViewportRenderQualityPart()
{
	if (isWindowsRunning())
	{
	string $visScrpt = "int $isFinal = 0; onRenderQualityChanged($isFinal);";

		frameLayout -label "Viewport Render Quality" -cll true -cl 0 fireRenderViewportQualityFrame;
		attrControlGrp
			 -label "Render Quality"
			 -attribute "RadeonProRenderGlobals.renderQualityViewport"
			 -cc UpdateViewportSettingsUI;
		setParent ..;
	}

	frameLayout -label "Viewport Ray Depths" -cll true -cl 0 fireRenderViewportRayDepthFrame;
	    attrControlGrp
	        -label "Max Ray Depth"
	        -attribute "RadeonProRenderGlobals.maxRayDepthViewport";

	    attrControlGrp
	        -label "Max Diffuse Ray Depth"
	        -attribute "RadeonProRenderGlobals.maxDepthDiffuseViewport";

	    attrControlGrp
	        -label "Max Reflection Ray Depth"
	        -attribute "RadeonProRenderGlobals.maxDepthGlossyViewport";
	setParent ..;

	frameLayout -label "Viewport Advanced Hybrid Params" -cll true -cl 0 fireRenderViewportHybridParams;
	    attrControlGrp
	        -label "Pt Denoiser"
	        -attribute "RadeonProRenderGlobals.ptDenoiser"
			-cc OnViewportDenoiserChanged
			viewportPtDenoiser;

	   attrControlGrp
	        -label "FSR"
	        -attribute "RadeonProRenderGlobals.FSR"
			-cc OnViewportFSRChanged
			viewportFSRControl;

	    attrControlGrp
	        -label "Material Cache"
	        -attribute "RadeonProRenderGlobals.materialCache";

		frameLayout -label "Restir" -cll false -cl 0;
			//attrControlGrp
			//    -label "RestirGI"
			//    -attribute "RadeonProRenderGlobals.restirGI";
			
			//attrControlGrp
			//    -label "RestirGI Bias Correction"
			//    -attribute "RadeonProRenderGlobals.restirGIBiasCorrection";
			
			attrControlGrp
			    -label "Restir"
				-en 0
			    -attribute "RadeonProRenderGlobals.reservoirSampling"
				viewportRestirControl;
		
			attrControlGrp
			    -label "Spatial Resample Iterations"
			    -attribute "RadeonProRenderGlobals.restirSpatialResampleIterations";
		
			attrControlGrp
			    -label "Max Reservoirs Per Cell"
			    -attribute "RadeonProRenderGlobals.restirMaxReservoirsPerCell";

		frameLayout -label "GMON" -cll false -cl 0;
			attrControlGrp
			    -label "Enable"
			    -attribute "RadeonProRenderGlobals.finalRender_useGmon";
   
			attrControlGrp
			    -label "GINI Coefficient"
			    -attribute "RadeonProRenderGlobals.finalRender_giniCoeffGmon";
	setParent ..;

	UpdateViewportSettingsUI();
}

global proc createQualityTab()
{
	string $parentForm = `setParent -query`;
	scrollLayout -w 375 -horizontalScrollBarThickness 0 fireRenderQualityScrollLayout;
	columnLayout -w 375 -adjustableColumn true fireRenderTabColumn;

	frameLayout -label "Engine:" -cll true -cl 0 fireRenderTahoeEngineFrame;
		attrControlGrp
			-label "Use Legacy OpenCL context"
			-attribute "RadeonProRenderGlobals.useOpenCLContext";
	setParent ..;

	createFinalRenderQualityPart();
	createViewportRenderQualityPart();

	formLayout
		-edit
		-af fireRenderQualityScrollLayout "top" 0
		-af fireRenderQualityScrollLayout "bottom" 0
		-af fireRenderQualityScrollLayout "left" 0
		-af fireRenderQualityScrollLayout "right" 0
		$parentForm;

        updateOOCUIProduction();
}

global proc updateOOCUIProduction()
{
	int $enabled = `getAttr RadeonProRenderGlobals.enableOOC`;

	// Lock controls and set it to ON state
	control -edit -enable ($enabled > 0) textureCacheSize;
}

global proc updateQualityTab()
{

}

source "createFireRenderGlobalsTab.mel";

global proc onRenderQualityChanged(int $isFinal)
{
	  // $isFinal - $isFinalRender 0 - cpu 0 - isGpu
	  string $cpuCtrlName = getDeviceCheckBoxCtrlName($isFinal, 0, 0);

	  int $renderQual;
	  int $disableCpu;
	  if($isFinal)
	  {
		$renderQual = `getAttr RadeonProRenderGlobals.renderQualityFinalRender`;
		$disableCpu = $renderQual == 5 ? 1 : 0; // 5 - RenderQualityHybridPro;
	  } else { // not final --> viewport
		$renderQual = `getAttr RadeonProRenderGlobals.renderQualityViewport`;
		$disableCpu = $renderQual == 0 ? 1 : 0; // 0 - Viewport HybridPro; 4 - NorthStar
	  }  
	  
	  if($disableCpu)
	  {
	  	string $gpuCtrlName = getDeviceCheckBoxCtrlName($isFinal, 0, 1);

		// we need catchQuiet in case System tab is not loaded yet - user did not open it
		catchQuiet(`
	  	checkBoxGrp
	  		-e
	  		-v1 0 // checked
	  		-en 0 // enabled 
	  		$cpuCtrlName
	  		`);

		catchQuiet(`
	  	checkBoxGrp
	  		-e
	  		-v1 1
	  		$gpuCtrlName
	  		`);

	  } else {
	    catchQuiet(`
	  	checkBoxGrp
	  		-e
	  		-en 1
	  		$cpuCtrlName
			`);	
	  }
}
