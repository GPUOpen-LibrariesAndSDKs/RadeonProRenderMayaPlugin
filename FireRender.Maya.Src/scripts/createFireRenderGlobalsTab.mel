//
// Copyright 2020 Advanced Micro Devices, Inc
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//    http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

proc string getPrefixForType(int $isFinalRender)
{
    if ($isFinalRender > 0)
        return "FinalRender";
    else
        return "Viewport";
}

proc string getDevicesUsingVarName(int $isFinalRender)
{   
    if ($isFinalRender)
    {
        return "RPR_DevicesSelected"; // for backward compatibility
    }

    return "RPR_ViewportDevicesSelected";
}

// control names handling
proc string getDeviceCheckBoxCtrlName(int $isFinalRender, int $index, int $isGPU)
{
    if ($isGPU > 0)
    {
        return getPrefixForType($isFinalRender) + "checkBox_Device" + $index;
    }
    else
    {
        return getPrefixForType($isFinalRender) + "checkBox_ResourcesCPU";
    }
}

global proc onOverrideThreadCountChanged(int $isFinalRender)
{
    string $prefix = getPrefixForType($isFinalRender);

    int $override = `getAttr ("RadeonProRenderGlobals.overrideCpuThreadCount" + $prefix)`;

    $ctrlName = $prefix + "CpuThreadCount_Ctrl";
    attrControlGrp -edit -enable $override $ctrlName;
}

global proc deviceTypeChangedUI(int $isFinalRender)
{
	$devices = `optionVar -q RPR_DevicesName`;

    string $selectedDevicesVarName = getDevicesUsingVarName($isFinalRender);

	optionVar -rm $selectedDevicesVarName;
	int $devicesInUse = 0;

	int $deviceCount = size($devices); // gpu devices
	for ($i = 0; $i < $deviceCount; $i++)
	{
		$ctrlName = getDeviceCheckBoxCtrlName($isFinalRender, $i, 1);

		int $checked = `checkBoxGrp -q -v1 $ctrlName`;
		if ($checked)
		{
    		$devicesInUse++;
		}

		optionVar -iva $selectedDevicesVarName ($checked);
	}

	int $forceUseCPU = ($devicesInUse == 0);

    string $cpuCtrlName = getDeviceCheckBoxCtrlName($isFinalRender, 0, 0);
	if($forceUseCPU)
	{
		checkBoxGrp
			-e
			-v1 1
			$cpuCtrlName
			;
	}

	int $useCPU = `checkBoxGrp -q -v1 $cpuCtrlName`;

	optionVar -iva $selectedDevicesVarName ($useCPU);

	//We need to turn off ML denoiser if unsupported CPU is used
	updateDenoiserAttributes();
}

// Open a browser window and display the specified URL.
global proc showRPRUrl(string $url)
{
	// Replace the '~' with '#' here, because '#t' is
	// converted to '1' when passing strings to functions.
	string $convertedUrl = `substitute "~" $url "#"`;

	showHelp -absolute $convertedUrl;
};

global proc showMoreAbout()
{
	string $fullPath = getenv("RPR_SCRIPTS_PATH") + "/AboutAndCopyright.html";

	showHelp -absolute $fullPath;
}

global proc createRenderResourcesFrame(string $parent, int $isFinalRender)
{
	setUITemplate -pushTemplate attributeEditorTemplate;

	setParent $parent;

	text
		-label "These settings will not affect currently active viewports.";

	columnLayout -cat left 20;

	$devices = `optionVar -q RPR_DevicesName`;
	$devicesCertified = `optionVar -q RPR_DevicesCertified`;
	$driversCompatible = `optionVar -q RPR_DriversCompatible`;

    string $selectedDevicesVarName = getDevicesUsingVarName($isFinalRender);
    string $changeCommand = "deviceTypeChangedUI(" + $isFinalRender + ")";

    $devicesUsing = `optionVar -q $selectedDevicesVarName`;

	for ($i = 0; $i < size($devices); $i++)
	{
		$ctrlName = getDeviceCheckBoxCtrlName($isFinalRender, $i, 1);
		int $checked = $i < size($devicesUsing) ? $devicesUsing[$i] : 0;
		$label = $devices[$i] + ($devicesCertified[$i] ? "" : " (Uncertified)");
		$label += $driversCompatible[$i] ? "" : " (Incompatible driver)";
		checkBoxGrp
			-label1 $label
			-cc $changeCommand
			-v1 $checked
			-ann ($devicesCertified[$i] ? "This device is certified compatible with Radeon ProRender" : "This device has not been certified for use with Radeon ProRender")
			$ctrlName
			;
	}

    $checked = size($devices) < size($devicesUsing) ? $devicesUsing[size($devicesUsing) - 1] : 0;
    $ctrlName = getDeviceCheckBoxCtrlName($isFinalRender, 0, 0);
	checkBoxGrp
		-label1 "CPU"
		-cc $changeCommand
        -v1 $checked
		-en 1
		-ann "CPU will be used when no GPU devices are active"
		$ctrlName
		;

	separator -height 10;

    string $prefix = getPrefixForType($isFinalRender);
   
    $ctrlName = ($prefix + "OverrideCpuThreadCount_Ctrl");

    attrControlGrp
        -attribute ("RadeonProRenderGlobals.overrideCpuThreadCount" + $prefix)
		-label "Override Thread Count"
        -cc ("onOverrideThreadCountChanged(" + $isFinalRender + ")")
        $ctrlName
    ;

    $ctrlName = ($prefix + "CpuThreadCount_Ctrl");
    attrControlGrp
        -attribute ("RadeonProRenderGlobals.cpuThreadCount" + $prefix)
		-label "CPU Thread Count"
        $ctrlName
    ;

    onOverrideThreadCountChanged($isFinalRender);

	setParent ..;

	setUITemplate -popTemplate;

	deviceTypeChangedUI($isFinalRender);
}

global proc createFireRenderGlobalsFrame(string $parent)
{
	setUITemplate -pushTemplate attributeEditorTemplate;

	//setParentToFireRenderTab();
	setParent $parent;

	columnLayout -adjustableColumn true;

	attrControlGrp
		 -label "Mode"
		 -attribute "RadeonProRenderGlobals.renderMode";

	setParent ..;
	setUITemplate -popTemplate;
}

global proc frAddAOV(string $name)
{
	string $pass_name = $name + "_pass";
	string $pass_node;
	if (size(`ls $pass_name`))
		$pass_node = $pass_name;
	else
	{
		$pass_node = `createNode -name $pass_name RPRRenderPass`;
	}
}

global proc frConnectOpacityPassRenderable()
{

	if (`objExists "opacity_pass"`)
	{
		connectControl frOpacityPass ("opacity_pass.renderable");
	}
}

global proc frEnsureOpacityPass()
{
	frAddAOV("opacity");
	textField -edit -en 1 frOpacityPassName;
}

global proc string frFramebufferName (string $default_name)
{
	string $framebuffer_name = $default_name;
	string $pass_name = $default_name + "_pass";
	if (`objExists $pass_name`)
	{
		$framebuffer_name = `getAttr ($pass_name + ".framebufferName")`;
		// cover for pre-name and lpe attribute output pass nodes
		if ($framebuffer_name == "")
			$framebuffer_name = $default_name;
	}
	return $framebuffer_name;
}


global proc frSetOpacityPassName()
{
	string $name = `textField -q -text frOpacityPassName`;
	setAttr -type "string" "opacity_pass.framebufferName" $name;
}

global proc aovDisplayedInRenderViewChanged()
{
}

// Set BG and Opacity AOVs to ON if SC turned ON. Also lock controls to guarantee that while we have SC set Bg and Opacity can't be turned off
global proc shadowCatcherStateChanged()
{
	int $isShadowCatcher = `getAttr RadeonProRenderGlobals.aovShadowCatcher`;
	int $isReflectionCatcher = `getAttr RadeonProRenderGlobals.aovReflectionCatcher`;

	if (($isShadowCatcher == 1) && ($isReflectionCatcher == 0))
	{
		// Lock controls and set it to ON state
		setAttr RadeonProRenderGlobals.aovBackground -lock 1 1;
		setAttr RadeonProRenderGlobals.aovOpacity -lock 1 1;
	}

	if (($isShadowCatcher + $isReflectionCatcher) == 0)
	{
		// Unlock controls
		setAttr RadeonProRenderGlobals.aovBackground -lock 0;
		setAttr RadeonProRenderGlobals.aovOpacity -lock 0;
	}
}

// Set BG and Opacity AOVs to ON if SC turned ON. Also lock controls to guarantee that while we have SC set Bg and Opacity can't be turned off
global proc reflectionCatcherStateChanged()
{
	int $isShadowCatcher = `getAttr RadeonProRenderGlobals.aovShadowCatcher`;
	int $isReflectionCatcher = `getAttr RadeonProRenderGlobals.aovReflectionCatcher`;

	if (($isShadowCatcher == 0) && ($isReflectionCatcher == 1))
	{
		// Lock controls and set it to ON state
		setAttr RadeonProRenderGlobals.aovBackground -lock 1 1;
		setAttr RadeonProRenderGlobals.aovOpacity -lock 1 1;
	}

	if (($isShadowCatcher + $isReflectionCatcher) == 0)
	{
		// Unlock controls
		setAttr RadeonProRenderGlobals.aovBackground -lock 0;
		setAttr RadeonProRenderGlobals.aovOpacity -lock 0;
	}
}

global proc createFireRenderRenderPassesFrame(string $parent)
{
	setUITemplate -pushTemplate attributeEditorTemplate;

	setParent $parent;

	columnLayout -adjustableColumn true;

	columnLayout frPassesLayout;
		attrControlGrp -label "Displayed In Render View" -cc aovDisplayedInRenderViewChanged -attribute "RadeonProRenderGlobals.aovDisplayedInRenderView";
		attrControlGrp -label "Opacity" -attribute "RadeonProRenderGlobals.aovOpacity";
		attrControlGrp -label "World Coordinate" -attribute "RadeonProRenderGlobals.aovWorldCoordinate";
		attrControlGrp -label "UV" -attribute "RadeonProRenderGlobals.aovUV";
		attrControlGrp -label "Material Index" -attribute "RadeonProRenderGlobals.aovMaterialIndex";
		attrControlGrp -label "Geometric Normal" -attribute "RadeonProRenderGlobals.aovGeometricNormal";
		attrControlGrp -label "Shading Normal" -attribute "RadeonProRenderGlobals.aovShadingNormal";
		attrControlGrp -label "Depth" -attribute "RadeonProRenderGlobals.aovDepth";
		attrControlGrp -label "Object ID" -attribute "RadeonProRenderGlobals.aovObjectId";
		// Set change handler to automatically control BG and Opacity AOV checkboxes
		attrControlGrp -label "Shadow Catcher" -attribute "RadeonProRenderGlobals.aovShadowCatcher" -changeCommand shadowCatcherStateChanged;
		attrControlGrp -label "Reflection Catcher" -attribute "RadeonProRenderGlobals.aovReflectionCatcher" -changeCommand reflectionCatcherStateChanged;
		attrControlGrp -label "Background" -attribute "RadeonProRenderGlobals.aovBackground";

		attrControlGrp -label "Emission" -attribute "RadeonProRenderGlobals.aovEmission";
		attrControlGrp -label "Velocity" -attribute "RadeonProRenderGlobals.aovVelocity";
		attrControlGrp -label "Direct Illumination" -attribute "RadeonProRenderGlobals.aovDirectIllumination";
		attrControlGrp -label "Indirect Illumination" -attribute "RadeonProRenderGlobals.aovIndirectIllumination";
		attrControlGrp -label "Ambient Occlusion" -attribute "RadeonProRenderGlobals.aovAO";
		attrControlGrp -label "Diffuse Direct" -attribute "RadeonProRenderGlobals.aovDiffuseDirect";
		attrControlGrp -label "Diffuse Indirect" -attribute "RadeonProRenderGlobals.aovDiffuseIndirect";
		attrControlGrp -label "Reflection Direct" -attribute "RadeonProRenderGlobals.aovReflectionDirect";
		attrControlGrp -label "Reflection Indirect" -attribute "RadeonProRenderGlobals.aovReflectionIndirect";
		attrControlGrp -label "Refraction" -attribute "RadeonProRenderGlobals.aovRefraction";
		attrControlGrp -label "Light Group 0" -attribute "RadeonProRenderGlobals.aovLightGroup0";
		attrControlGrp -label "Light Group 1" -attribute "RadeonProRenderGlobals.aovLightGroup1";
		attrControlGrp -label "Light Group 2" -attribute "RadeonProRenderGlobals.aovLightGroup2";
		attrControlGrp -label "Light Group 3" -attribute "RadeonProRenderGlobals.aovLightGroup3";
		attrControlGrp -label "Subsurface / Volume" -attribute "RadeonProRenderGlobals.aovVolume";
		attrControlGrp -label "Albedo" -attribute "RadeonProRenderGlobals.aovAlbedo";

	setParent ..;
	setUITemplate -popTemplate;
}

global proc createObjectMaterialIDFrame(string $parent)
{
	setUITemplate -pushTemplate attributeEditorTemplate;

	setParent $parent;
	columnLayout -adjustableColumn true;

	button -label "Assign Object ID to all transforms" -command "OnAutoObjectIdAssign" objectIDAssignBtn;

	setParent ..;
	setUITemplate -popTemplate;
}

global proc OnAutoObjectIdAssign()
{
    string $arrNames[] = `ls -type "transform" -long`;

    int $index = 1;

    for ($transformFullName in $arrNames)
    {
	string $attr = $transformFullName + ".RPRObjectId";
	setAttr $attr $index;
	$index ++;
    }
}


global proc createFireRenderAOVsTab()
{
	string $parentForm = `setParent -query`;
	scrollLayout -w 375 -horizontalScrollBarThickness 0 fireRenderGlobalsScrollLayout;
	columnLayout -w 375 -adjustableColumn true fireRenderTabColumn;

	// Render Passes
	//
	frameLayout -label "Render Passes (AOV)" -cll false -cl 0 fireRenderRenderPassesFrame;
	createFireRenderRenderPassesFrame ("fireRenderRenderPassesFrame");
	setParent ..;

	frameLayout -label "Object/Material ID" -cll false -cl 0 fireRenderObjectMaterialIDFrame;
	createObjectMaterialIDFrame ("fireRenderObjectMaterialIDFrame");
	setParent ..;


	// Parameters are moved to Common Tab. We may remove these comments later
	// Depth settings
	//frameLayout -label "EXR Parameters" -cll false -cl 0 fireRenderEXRParameters;

	//createEXRParameters("fireRenderEXRParameters");
	//setParent ..;

	setParent ..;
	setParent ..;

	formLayout
		-edit
		-af fireRenderGlobalsScrollLayout "top" 0
		-af fireRenderGlobalsScrollLayout "bottom" 0
		-af fireRenderGlobalsScrollLayout "left" 0
		-af fireRenderGlobalsScrollLayout "right" 0
		$parentForm;
}

global proc aovDepthAutoNormaliseChanged()
{
	if (`getAttr RadeonProRenderGlobals.aovDepthAutoNormalise`)
	{
		// Lock controls and
		setAttr RadeonProRenderGlobals.aovDepthNormaliseMin -lock 1;
		setAttr RadeonProRenderGlobals.aovDepthNormaliseMax -lock 1;
	}
	else
	{
		// Unlock controls
		setAttr RadeonProRenderGlobals.aovDepthNormaliseMin -lock 0;
		setAttr RadeonProRenderGlobals.aovDepthNormaliseMax -lock 0;
	}
}

//global proc createEXRParameters(string $parent)
//{
//	setUITemplate -pushTemplate attributeEditorTemplate;

//	setParent $parent;

//	columnLayout;

//	attrControlGrp
//		 -label "EXR Compression"
//		 -attribute "RadeonProRenderGlobals.exrCompression";
  
//	attrControlGrp
//		 -label "Channel Format"
//		 -attribute "RadeonProRenderGlobals.exrChannelFormat";

//	setParent ..;
//	setUITemplate -popTemplate;
//}

global proc updateDenoiserAttributes() 
{
	int $renderDevices[] = `optionVar -q RPR_DevicesSelected`;
	int $deviceCount = size(`optionVar -q RPR_DevicesName`);
	
	//Assuming that CPU will be the last device
	int $cpuEnabled = $renderDevices[$deviceCount];
	int $anyGpuEnabled = 0;
	for($i = 0; $i < size($renderDevices) - 1; $i++) 
	{
		if($renderDevices[$i] == 1) 
		{
			$anyGpuEnabled = 1;
		}
	}

	if(getMlDenoiserSupportedCPU() == 0 && $cpuEnabled && $anyGpuEnabled == 0)
	{
		int $type = `getAttr RadeonProRenderGlobals.denoiserType`;
		//Machine learning should be always at index 3
		if($type == 3) 
		{
			setAttr RadeonProRenderGlobals.denoiserEnabled 0;
			setAttr RadeonProRenderGlobals.denoiserType 0;
		}
	}
}
