//
// Copyright 2020 Advanced Micro Devices, Inc
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//    http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

proc string localizedAttrName( string $name ) 
{
	if( $name == "Selected Color" ) 
	{
		return (uiRes("m_AEaddRampControl.kSelClr"));
	} 
	else if ( $name == "Selected Position" ) 
	{
		return (uiRes("m_AEaddRampControl.kSelPos"));
	} 
	else if ( $name == "Selected Value" ) 
	{
		return (uiRes("m_AEaddRampControl.kSelVal"));
	} 
	else if ( $name == "Interpolation method" ) 
	{
		return (uiRes("m_AEaddRampControl.kInterpMethod"));
	}
}


global proc RPRmakeLargeRamp( string $nodeAttr,
							int $bound,
							int $indent,
							int $staticEntries,
							int $staticPositions,
							int $adaptiveScaling )
//
//	Description:
//
//	$staticEntries - If set to 1, the gradientControl widget will be set to
//					a fixed number of ramp entries (control points).
//
{
	string $buffer[];
	tokenize($nodeAttr, ".", $buffer);
	string $attr = $buffer[ size($buffer) - 1];

	string $rampName = $attr + "Ramp";
	string $scName = $attr +"Scc";
	string $spName = $attr +"Sp";

	string $colEntryName =  ($nodeAttr + "[0]." + $attr + "_ColorR");
	int $isColor = `objExists ($colEntryName)`;

	setUITemplate -pst attributeEditorTemplate;
	columnLayout -rowSpacing 2;

	// ramp block
	string $rampForm = `formLayout ($rampName + "Form")`;
	string $spc	= `attrFieldSliderGrp -label (localizedAttrName("Selected Position"))
		-cw 1 123 -annotation (localizedAttrName("Selected Position")) $spName`;
	string $scc;
	if( $isColor )
	{
		$scc = `attrColorSliderGrp -label (localizedAttrName("Selected Color"))
			-cw 1 123 -cw 2 45 -cw 3 0 -annotation (localizedAttrName("Selected Color")) -sb 1 $scName`;
	} 
	else 
	{
		$scc = `attrFieldSliderGrp -label (localizedAttrName("Selected Value"))
		-cw 1 123 -annotation (localizedAttrName("Selected Value")) $scName`;
	}
	
	string $lmax;
	if ( $adaptiveScaling ) 
	{
		$lmax = `text -label "1.0" ($rampName+"LX")`;
	}
	string $rframe = `frameLayout -lv 0 -cll 0 ($rampForm + "fr")`;
	string $widgetName = `gradientControl
							-at $nodeAttr
							-snc $staticEntries
							-sp $staticPositions
							-w 135 -h 74
							$rampName`;
	if ( $adaptiveScaling ) 
	{
		gradientControl -e -as $adaptiveScaling -ror $adaptiveScaling -ulc $lmax $widgetName;
	}

	setParent ..;
	formLayout
		-edit
			-attachForm $spc "left"  0
			-attachNone $spc "right"
			-attachForm $spc "top" 0
			-attachNone $spc "bottom"

			-attachForm $scc "left" 0 
			-attachNone $scc "right"
			-attachControl $scc "top" 0 $spc
			-attachNone $scc "bottom"

			-attachControl $rframe "left" 2 $scc
			-attachNone $rframe "right"
			-attachForm $rframe "top" 0
			-attachNone $rframe "bottom"
			$rampForm;

	if ( $adaptiveScaling ) 
	{
		formLayout
			-edit
				-attachControl $lmax "left" 2 $rframe
				-attachNone $lmax "right"
				-attachForm $lmax "top" 0
				-attachNone $lmax "bottom"
				$rampForm;
	}

	setParent ..;

	// input
	if(objExists ($nodeAttr +"Input"))
	{
		string $inLabel;
		string $labelAttr = `attributeName -nice $nodeAttr`;
		string $inputVarAnnot = (uiRes("m_AEaddRampControl.kInputVarAnnot"));
		
		if( $indent || size( $labelAttr ) < 9 )
		{
			string $fmt = (uiRes("m_AEaddRampControl.kInputFmt"));
			$inLabel = `format -s $labelAttr $fmt`;
		} 
		else 
		{
			$inLabel = (uiRes("m_AEaddRampControl.kInputShort"));
		}

		if( $indent )
		{
			attrEnumOptionMenuGrp -l $inLabel
				-ann $inputVarAnnot
				-cw 1 204
				-at ($nodeAttr + "Input") ($rampName + "Input");
		} 
		else 
		{
			attrEnumOptionMenuGrp -l $inLabel
				-ann $inputVarAnnot
				-cw 1 123
				-at ($nodeAttr + "Input") ($rampName + "Input");
		}
		
	}

	// inputBias
	if(  objExists ($nodeAttr +"InputBias") )
	{
		attrFieldSliderGrp -label (uiRes("m_AEaddRampControl.kInputBias")) -cw4 123 81 130	25 
				-at ($nodeAttr +"InputBias") ($rampName + "InputBias");
	}

	// inputScale
	if(  objExists ($nodeAttr +"InputScale") )
	{
		attrFieldSliderGrp -label (uiRes("m_AEaddRampControl.kInputScale")) -cw4 123 81 130 25	
				-at ($nodeAttr +"InputScale") ($rampName + "InputScale");
	}
	// inputMax
	if(  objExists ($nodeAttr +"InputMax") )
	{
		attrFieldSliderGrp -label (uiRes("m_AEaddRampControl.kInputMax")) -cw4 123 81 130 25	
				-at ($nodeAttr +"InputMax") ($rampName + "InputMax");
	}
	// inputOffset
	if(  objExists ($nodeAttr +"InputOffset") )
	{
		attrFieldSliderGrp -label (uiRes("m_AEaddRampControl.kInputOffset")) -cw4 123 81 130 25	
				-at ($nodeAttr +"InputOffset") ($rampName + "InputOffset");
	}

	// tell the port about the controls
	gradientControl -e -scc $scc $widgetName;
	gradientControl -e -spc $spc $widgetName;
	setUITemplate -ppt;
}


global proc RPRmakeRampControlInteractiveNew(string $nodeAttr)
{
	RPRmakeLargeRamp( $nodeAttr,1,1,1,0,0 );
}


global proc RPRaddRampControl( string $rampName )
//  
//  Description: 
// In order to use catalog lookups for the attribute name,
// $rampName should be of form "pCube.translateX".  For backward
// compatability, $rampName can also be just
// "translateX" but in this case no catalog lookup can be
// performed and interToUI() will be called to obtain the UI
// display label for the attribute.
// 
{
	int $rampDrawMethod = 0;
	if( `optionVar -exists "gradientControlDrawMethod"` ) 
	{
		$rampDrawMethod = `optionVar -q "gradientControlDrawMethod"`;
	}
	
	int $subBlock = (($rampDrawMethod < 1) || ($rampDrawMethod > 2));
	if( $subBlock )
	{
		string $rampTitle;
		string $nodeAttr[];
		
		// tokenize $rampName on "." to see if we get the nodeName and attrName
		// pieces required for a catalog lookup.
		//
		tokenize ($rampName,".",$nodeAttr);
		if( size($nodeAttr) == 2 ) 
		{            
			$rampTitle = "Input Ramp";
			
			// Change rampName back to attrName format
			//
			$rampName = $nodeAttr[1];     
		}
		// Old-style attr name used.  No choice but to use interToUI().
		//
		else 
		{
			// I18N_OK: All calls to AEaddRampControl and AEaddRampControlAS
			// must be modified to include nodeName.attrName as the 1st 
			// attribute instead of just attrName. If this was not done, 
			// we have to revert to interToUI as a last resort.
			$rampTitle = interToUI($rampName);
		}
	
		editorTemplate -beginLayout $rampTitle -collapse false;
	}

	editorTemplate -callCustom "RPRmakeRampControlInteractiveNew"
						"AEmakeRampControlInteractiveReplace" $rampName;
	
	if( $subBlock ) 
	{
		editorTemplate -endLayout;
	}
	
	editorTemplate -suppress ($rampName + "Input");
	editorTemplate -suppress ($rampName + "InputBias");
	editorTemplate -suppress ($rampName + "InputScale");
	editorTemplate -suppress ($rampName + "InputMax");
}


global proc AERPRToonMaterialTemplate( string $nodeName )
{
	AEswatchDisplay $nodeName;
	
	editorTemplate -beginScrollLayout;

	editorTemplate -beginLayout "ToonShader" -collapse 0;
		editorTemplate -l "Show Advanced" -addControl "showAdvanced" "ShowAdvancedChanges";

		editorTemplate -l "Color" -addControl "color";
		editorTemplate -l "Roughness" -addControl "roughness";
		editorTemplate -l "Normal Map" -addControl "normal";

		editorTemplate -l "Transparency Enable" -addControl "transparencyEnable" "TransparencyEnableChanged";
		editorTemplate -l "Transparency Level" -addControl "transparencyLevel";

		editorTemplate -beginLayout "Advanced" -collapse 0;
			editorTemplate -l "Enable 5 Colors" -addControl "enable5Colors" "UpdateRampFieldsEnable";
			editorTemplate -l "Show Mix Levels" -addControl "showMixLevels" "UpdateRampFieldsEnable";

			RPRaddRampControl ($nodeName + ".input5Ramp");

			editorTemplate -l "Shadow Level Mix" -addControl "rampRangeShadow";
			editorTemplate -l "Mid Level Mix" -addControl "rampRange1";
			editorTemplate -l "Highlight Level Mix" -addControl "rampRange2";
			editorTemplate -l "Highlight Level Mix 2" -addControl "rampRangeHighlight";
			
			editorTemplate -l "Light Linking Enable" -addControl "enableLightLinking" "LightLinkingEnableChanged";

			editorTemplate -callCustom "LinkedLightNew" "LinkedLightReplace" "linkedLightObject";
			
			editorTemplate -l "Use Mid Color As Albedo" -addControl "enableMidColorAsAlbedo";
			
		editorTemplate -endLayout;
	editorTemplate -endLayout;

	AEdependNodeTemplate $nodeName;
	
	editorTemplate -addExtraControls;

	editorTemplate -endScrollLayout;
}

global proc string GetLinkedLightDropdownCommand(string $attrName, string $ctrlName)
{
	return "OnLinkedLightChanged(\"" + $attrName + "\",\"" + $ctrlName + "\")";
}

global proc UpdateLinkedLightsDropdown(string $attrName)
{
    $items = `optionMenu -q -itemListLong linkedLightDropdownCtrl`;
	if (size($items) > 0)
	{
		deleteUI($items);
	}

	$lightNames = GetAllLights();

	menuItem -parent linkedLightDropdownCtrl -label "";
	for ($lightName in $lightNames)
	{
		menuItem -parent linkedLightDropdownCtrl -label $lightName;
	}

	string $connections[] = `listConnections -shapes true $attrName`;
	string $value = "";

	if (size($connections) > 0)
	{
		 $value = $connections[0];
	}

	optionMenu -e -v $value linkedLightDropdownCtrl;
}

global string $g_dropdownList[];

global proc LinkedLightNew(string $attrName)
{
	global string $g_dropdownList[];

	rowLayout;
		$g_dropdownList[size($g_dropdownList)] = `optionMenu -label "Linked Light" linkedLightDropdownCtrl`;
		setParent ..;
	setParent ..;

	LinkedLightReplace($attrName);
}

global proc LinkedLightReplace(string $attrName)
{
	string $ctrlName = `control -q -fullPathName linkedLightDropdownCtrl`;

	$command = GetLinkedLightDropdownCommand($attrName, $ctrlName);
	optionMenu -edit -changeCommand $command linkedLightDropdownCtrl;

        UpdateLinkedLightsDropdown($attrName);
}

// Linked light dropdown array refresh - remove non existing controls (non existing drop downs which appear if you show and hide Hypershade for example)
global proc RefreshExistingControlList()
{
	global string $g_dropdownList[];

	string $dropdownList[];

	for ($ctrl in $g_dropdownList)
	{
		if (`control -ex $ctrl`)
		{
			$dropdownList[size($dropdownList)] = $ctrl;
		}
	}

	$g_dropdownList = $dropdownList;
}

global proc OnLinkedLightChanged(string $attrName, string $ctrlName)
{
	global string $g_dropdownList[];

	string $newLightName = `optionMenu -q -v $ctrlName`;

	string $connections[] = `listConnections -shapes true -plugs true $attrName`;

	if (size($connections) > 0)
	{
		disconnectAttr $connections[0] $attrName;
	}

	if ($newLightName != "")
	{
		$firstAttr = $newLightName + ".message";
		connectAttr $firstAttr $attrName;
	}

	RefreshExistingControlList();
	// update all linked light dropdowns
	for ($ctrl in $g_dropdownList)
	{
	 	if ($ctrl == $ctrlName)
			continue;

		optionMenu -e -v $newLightName $ctrl;
	}
}

global proc string[] GetAllLights()
{
	string $lightTypes[] = {"ambientLight", "directionalLight", "spotLight", "pointLight", "RPRPhysicalLight", "RPRIES", "RPRIBL"};
	string $lightNames[];
	
	for($lightType in $lightTypes)
	{
		string $lights[] = `ls -type $lightType`;

		for ($lightName in $lights)
		{
			$lightNames[size($lightNames)] = $lightName;
		}
	}

	return $lightNames;
}

global proc ShowAdvancedChanges(string $nodeName)
{
	string $nodeAttr = $nodeName + ".showAdvanced";
	$dim = !`getAttr $nodeAttr`;

	editorTemplate -dimControl $nodeName showMixLevels $dim;

	editorTemplate -dimControl $nodeName enable5Colors $dim;
	editorTemplate -dimControl $nodeName input5Ramp $dim;
	
	editorTemplate -dimControl $nodeName enableLightLinking $dim;
	
	editorTemplate -dimControl $nodeName enableMidColorAsAlbedo $dim;

	UpdateRampFieldsEnable($nodeName);
}

global proc UpdateRampFieldsEnable(string $nodeName)
{	
	string $nodeAttr1 = $nodeName + ".showAdvanced";
	string $nodeAttr2 = $nodeName + ".showMixLevels";
	string $nodeAttr3 = $nodeName + ".enable5Colors";

	$dimMixLevels = !`getAttr $nodeAttr1` || !`getAttr $nodeAttr2`;
	$dim5Colors = !`getAttr $nodeAttr1` || !`getAttr $nodeAttr3`;
	$dim5ColorsMixLevel = !`getAttr $nodeAttr1` || !`getAttr $nodeAttr2`|| !`getAttr $nodeAttr3`;

	editorTemplate -dimControl $nodeName highlightColor2 $dim5Colors;
	editorTemplate -dimControl $nodeName shadowColor2 $dim5Colors;

	editorTemplate -dimControl $nodeName rampPositionShadow $dim5Colors;
	editorTemplate -dimControl $nodeName rampPositionHighlight $dim5Colors;

	editorTemplate -dimControl $nodeName rampRange1 $dimMixLevels;
	editorTemplate -dimControl $nodeName rampRange2 $dimMixLevels;

	editorTemplate -dimControl $nodeName rampRangeShadow $dim5ColorsMixLevel;
	editorTemplate -dimControl $nodeName rampRangeHighlight $dim5ColorsMixLevel;

	string $rampAttribute = $nodeName + ".input5Ramp";
	int $countCtrlPoints = `getAttr -s $rampAttribute`;
	if ($countCtrlPoints == 1) // this is new toon material
	{
		setAttr ($rampAttribute+"[0].input5Ramp_Position") 0.2;
		setAttr ($rampAttribute+"[0].input5Ramp_Interp") 0;
		setAttr ($rampAttribute+"[1].input5Ramp_Color") -type double3 0.4 0.4 0.4;
		setAttr ($rampAttribute+"[1].input5Ramp_Position") 0.5;
		setAttr ($rampAttribute+"[1].input5Ramp_Interp") 0;
		setAttr ($rampAttribute+"[2].input5Ramp_Position") 0.8;
		setAttr ($rampAttribute+"[2].input5Ramp_Color") -type double3 0.8 0.8 0.8;
		setAttr ($rampAttribute+"[2].input5Ramp_Interp") 0;
	}

	if ($dim5Colors) 
	{
		if ($countCtrlPoints == 5) 
		{
			// ramp should have 3 control point
			// - save control point data to attribute
			float $color[] = `getAttr ($rampAttribute+"[3].input5Ramp_Color")`;
			setAttr ($nodeName + ".shadowColor2") -type double3 $color[0] $color[1] $color[2];
			// shadow2 position should always be 0.0!

			$color = `getAttr ($rampAttribute+"[4].input5Ramp_Color")`;
			setAttr ($nodeName + ".highlightColor2") -type double3 $color[0] $color[1] $color[2];
			float $position = `getAttr ($rampAttribute+"[4].input5Ramp_Position")`;
			setAttr ($nodeName + ".rampPositionHighlight") $position;

			// remove control points
			removeMultiInstance -break true ($rampAttribute+"[3]");
			removeMultiInstance -break true ($rampAttribute+"[4]");
		}
	} 
	else if ($countCtrlPoints == 3) 
	{
		// ramp should have 5 control points
		float $color[] = `getAttr ($nodeName + ".shadowColor2")`;
		setAttr ($rampAttribute+"[3].input5Ramp_Color") -type double3 $color[0] $color[1] $color[2];
		setAttr ($rampAttribute+"[3].input5Ramp_Interp") 0;
		setAttr ($rampAttribute+"[3].input5Ramp_Position") 0.0; // should always be zero
		$color = `getAttr ($nodeName + ".highlightColor2")`;
		setAttr ($rampAttribute+"[4].input5Ramp_Color") -type double3 $color[0] $color[1] $color[2];
		setAttr ($rampAttribute+"[4].input5Ramp_Interp") 0;
		setAttr ($rampAttribute+"[4].input5Ramp_Position") `getAttr ($nodeName + ".rampPositionHighlight")`;
	}
}

global proc TransparencyEnableChanged(string $nodeName)
{
	string $nodeAttr1 = $nodeName + ".transparencyEnable";

	$dim = !`getAttr $nodeAttr1`;

	editorTemplate -dimControl $nodeName transparencyLevel $dim;
}

global proc LightLinkingEnableChanged(string $nodeName)
{
	global string $g_dropdownList[];
	string $checkboxName = $nodeName + ".enableLightLinking";
	
	$enable = `getAttr $checkboxName`;

	RefreshExistingControlList();
	for ($ctrl in $g_dropdownList)
	{
		optionMenu -edit -enable $enable $ctrl;
	}
}

global proc ConvertLegacyLightLinkedAttribute()
{
	string $toonMaterials[] = `ls -type RPRToonMaterial`;

	for ($toonMaterial in $toonMaterials)
	{      
		if (!`attributeExists "linkedLight" $toonMaterial`)
			continue;

		string $enabledAttrName = $toonMaterial + ".enableLightLinking";
		string $legacyAttrName = $toonMaterial + ".linkedLight";

		if (`getAttr $enabledAttrName` == 0)
			continue;

		string $lightName = `getAttr -asString $legacyAttrName`;

		string $linkedLightObjectAttr = $toonMaterial + ".linkedLightObject";

		$firstAttr = $lightName + ".message";
		connectAttr $firstAttr $linkedLightObjectAttr;

		deleteAttr $legacyAttrName;
		print("RadeonProRender: Legacy attribute " + $legacyAttrName + " converted!\n");
	}

	for ($toonMaterial in $toonMaterials)
	{ 
		string $colorPoints[];
		string $posPoints[];
		string $rampAttribute = $toonMaterial + ".input5Ramp";

		int $id[] = `getAttr -mi $rampAttribute`;
		if (`size($id)` > 0)
			continue; // ramp is already created; no need to convert!

		if (`getAttr ($toonMaterial + ".enable5Colors")` == 0)
		{
			// ramp should have 3 control point
			$colorPoints = {".shadowColor", ".midColor", ".highlightColor"};
			$posPoints = {"", ".rampPosition1", ".rampPosition2"};
		}
		else
		{
			// ramp should have 5 control point
			$colorPoints = {".shadowColor2", ".shadowColor", ".midColor", ".highlightColor", ".highlightColor2"};
			$posPoints = {"", ".rampPositionShadow", ".rampPosition1", ".rampPosition2", ".rampPositionHighlight"};
		}

		for ($index = 0; $index < size($colorPoints); $index++)
		{
			float $color[] = `getAttr ($toonMaterial + $colorPoints[$index])`;
			setAttr ($rampAttribute+"["+$index+"].input5Ramp_Color") -type double3 $color[0] $color[1] $color[2];
			setAttr ($rampAttribute+"["+$index+"].input5Ramp_Interp") 0;

			if ($posPoints[$index] == "")
			{
				continue;
			}

			setAttr ($rampAttribute+"["+$index+"].input5Ramp_Position") `getAttr ($toonMaterial + $posPoints[$index])`; 
		}
	}
}
