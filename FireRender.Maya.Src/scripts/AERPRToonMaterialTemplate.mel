//
// Copyright 2020 Advanced Micro Devices, Inc
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//    http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

global proc AERPRToonMaterialTemplate( string $nodeName )
{
	AEswatchDisplay $nodeName;
	
	editorTemplate -beginScrollLayout;

	editorTemplate -beginLayout "ToonShader" -collapse 0;
		editorTemplate -l "Show Advanced" -addControl "showAdvanced" "ShowAdvancedChanges";

		editorTemplate -l "Color" -addControl "color";
		editorTemplate -l "Roughness" -addControl "roughness";
		editorTemplate -l "Normal Map" -addControl "normal";

		editorTemplate -l "Transparency Enable" -addControl "transparencyEnable" "TransparencyEnableChanged";
		editorTemplate -l "Transparency Level" -addControl "transparencyLevel";

		editorTemplate -beginLayout "Advanced" -collapse 0;
			editorTemplate -l "Enable 5 Colors" -addControl "enable5Colors" "UpdateRampFieldsEnable";

			editorTemplate -l "Show Mix Levels" -addControl "showMixLevels" "UpdateRampFieldsEnable";

			editorTemplate -l "Highlight Color 2" -addControl "highlightColor2";
			editorTemplate -l "Highlight Color" -addControl "highlightColor";
			editorTemplate -l "Mid Color" -addControl "midColor";
			editorTemplate -l "Shadow Color" -addControl "shadowColor";
			editorTemplate -l "Shadow Color 2" -addControl "shadowColor2";

			editorTemplate -l "Shadow Level" -addControl "rampPositionShadow";
			editorTemplate -l "Mid Level" -addControl "rampPosition1";
			editorTemplate -l "Highlight Level" -addControl "rampPosition2";
			editorTemplate -l "Highlight Level 2" -addControl "rampPositionHighlight";

			editorTemplate -l "Shadow Level Mix" -addControl "rampRangeShadow";
			editorTemplate -l "Mid Level Mix" -addControl "rampRange1";
			editorTemplate -l "Highlight Level Mix" -addControl "rampRange2";
			editorTemplate -l "Highlight Level Mix 2" -addControl "rampRangeHighlight";
			
			editorTemplate -l "Light Linking Enable" -addControl "enableLightLinking" "LightLinkingEnableChanged";
			editorTemplate -l "Linked Light" -addControl "linkedLight";
			
			editorTemplate -l "Use Mid Color As Albedo" -addControl "enableMidColorAsAlbedo";
			
		editorTemplate -endLayout;
	editorTemplate -endLayout;

	AEdependNodeTemplate $nodeName;
	
	editorTemplate -addExtraControls;

	editorTemplate -endScrollLayout;
}

global proc InitLightLinking (string $nodeName)
{
	if (!`attributeExists "linkedLight" $nodeName`)
	{
		addAttr -at enum -en "none" -ln linkedLight -r 0 -w 1 -k 0 -s 1 $nodeName;
		RefreshLinkedLightAttribute $nodeName "";
	}
}


global proc ShowAdvancedChanges(string $nodeName)
{
	string $nodeAttr = $nodeName + ".showAdvanced";
	$dim = !`getAttr $nodeAttr`;

	editorTemplate -dimControl $nodeName showMixLevels $dim;

	editorTemplate -dimControl $nodeName enable5Colors $dim;

	editorTemplate -dimControl $nodeName highlightColor $dim;
	editorTemplate -dimControl $nodeName midColor $dim;
	editorTemplate -dimControl $nodeName shadowColor $dim;

	editorTemplate -dimControl $nodeName rampPosition1 $dim;
	editorTemplate -dimControl $nodeName rampPosition2 $dim;
	
	editorTemplate -dimControl $nodeName enableLightLinking $dim;
	
	editorTemplate -dimControl $nodeName enableMidColorAsAlbedo $dim;

	UpdateRampFieldsEnable($nodeName);
}

global proc UpdateRampFieldsEnable(string $nodeName)
{	
	string $nodeAttr1 = $nodeName + ".showAdvanced";
	string $nodeAttr2 = $nodeName + ".showMixLevels";
	string $nodeAttr3 = $nodeName + ".enable5Colors";

	$dimMixLevels = !`getAttr $nodeAttr1` || !`getAttr $nodeAttr2`;
	$dim5Colors = !`getAttr $nodeAttr1` || !`getAttr $nodeAttr3`;
	$dim5ColorsMixLevel = !`getAttr $nodeAttr1` || !`getAttr $nodeAttr2`|| !`getAttr $nodeAttr3`;

	editorTemplate -dimControl $nodeName highlightColor2 $dim5Colors;
	editorTemplate -dimControl $nodeName shadowColor2 $dim5Colors;

	editorTemplate -dimControl $nodeName rampPositionShadow $dim5Colors;
	editorTemplate -dimControl $nodeName rampPositionHighlight $dim5Colors;

	editorTemplate -dimControl $nodeName rampRange1 $dimMixLevels;
	editorTemplate -dimControl $nodeName rampRange2 $dimMixLevels;

	editorTemplate -dimControl $nodeName rampRangeShadow $dim5ColorsMixLevel;
	editorTemplate -dimControl $nodeName rampRangeHighlight $dim5ColorsMixLevel;
}

global proc TransparencyEnableChanged(string $nodeName)
{
	string $nodeAttr1 = $nodeName + ".transparencyEnable";

	$dim = !`getAttr $nodeAttr1`;

	editorTemplate -dimControl $nodeName transparencyLevel $dim;
}

global proc LightLinkingEnableChanged(string $nodeName)
{
	string $checkboxName = $nodeName + ".enableLightLinking";
	
	$dim = !`getAttr $checkboxName`;
	
	editorTemplate -dimControl $nodeName linkedLight $dim;
}

global proc RefreshLinkedLightAttribute(string $nodeName, string $ignoreLightName)
{	
	string $lightTypes[] = {"ambientLight", "directionalLight", "spotLight", "pointLight", "RPRPhysicalLight", "RPRIES", "RPRIBL"};
	string $lightNames = "";
	
	for($lightType in $lightTypes)
	{
		string $lights[] = `ls -type $lightType`;
		for($light in $lights)
		{	
			if($ignoreLightName == "" || $light != $ignoreLightName)
			{
				$lightNames = $lightNames + $light + ":";
			}
		}
	}
	
	if (`size $lightNames` > 0)
	{
		// remove last ':' character
		$lightNames = `substring $lightNames 1 (size($lightNames) - 1)`;
	}
	else
	{
		$lightNames = "none";
		
		// disable light linking if no available lights
		string $checkboxName = $nodeName + ".enableLightLinking";
		setAttr $checkboxName 0;
	}
	
	string $enumName = $nodeName + ".linkedLight";
	addAttr -edit -enumName $lightNames $enumName;
	
	refreshEditorTemplates $nodeName;
}

global proc int GetLinkedLightNumberByName(string $nodeName, string $name)
{
	int $num = 0;
	string $enumList[];
	string $enumListRaw[] = `attributeQuery -le -n $nodeName "linkedLight"`;
	tokenize $enumListRaw[0] ":" $enumList;
	
	
	for($enumName in $enumList)
	{
		if($enumName == $name)
		{
			return $num;
		}
		$num++;		
	}
	return 0;
}

global proc ToonShaderLightAdded(string $lightName, string $nodeName)
{
	string $enumName = $nodeName + ".linkedLight";
	string $currentValue = `getAttr -as $enumName`;
	
	RefreshLinkedLightAttribute $nodeName "";
	
	int $value = GetLinkedLightNumberByName($nodeName, $currentValue);
	setAttr $enumName $value;
}

global proc ToonShaderLightRemoved(string $lightName, string $nodeName)
{
	string $enumName = $nodeName + ".linkedLight";
	string $currentValue = `getAttr -as $enumName`;
	
	RefreshLinkedLightAttribute $nodeName $lightName;
	
	if($currentValue == $lightName) // current light has been deleted
	{
		setAttr $enumName 0;
	}
	else
	{
		int $value = GetLinkedLightNumberByName($nodeName, $currentValue);
		setAttr $enumName $value;
	}
}

global proc ToonShaderLightRenamed(string $lightName, string $lightPrevName, string $nodeName)
{
	string $enumName = $nodeName + ".linkedLight";
	string $currentValue = `getAttr -as $enumName`;
	
	RefreshLinkedLightAttribute $nodeName "";
	
	if($currentValue == $lightPrevName)
	{
		int $value = GetLinkedLightNumberByName($nodeName, $lightName);
		setAttr $enumName $value;
	}
}


