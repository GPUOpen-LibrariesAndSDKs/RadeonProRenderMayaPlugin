//
// Copyright 2020 Advanced Micro Devices, Inc
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//    http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

global proc AERPRToonMaterialTemplate( string $nodeName )
{
	AEswatchDisplay $nodeName;
	
	editorTemplate -beginScrollLayout;

	editorTemplate -beginLayout "ToonShader" -collapse 0;
		editorTemplate -l "Show Advanced" -addControl "showAdvanced" "ShowAdvancedChanges";

		editorTemplate -l "Color" -addControl "color";
		editorTemplate -l "Roughness" -addControl "roughness";
		editorTemplate -l "Normal Map" -addControl "normal";

		editorTemplate -l "Transparency Enable" -addControl "transparencyEnable" "TransparencyEnableChanged";
		editorTemplate -l "Transparency Level" -addControl "transparencyLevel";

		editorTemplate -beginLayout "Advanced" -collapse 0;
			editorTemplate -l "Enable 5 Colors" -addControl "enable5Colors" "UpdateRampFieldsEnable";

			editorTemplate -l "Show Mix Levels" -addControl "showMixLevels" "UpdateRampFieldsEnable";

			editorTemplate -l "Highlight Color 2" -addControl "highlightColor2";
			editorTemplate -l "Highlight Color" -addControl "highlightColor";
			editorTemplate -l "Mid Color" -addControl "midColor";
			editorTemplate -l "Shadow Color" -addControl "shadowColor";
			editorTemplate -l "Shadow Color 2" -addControl "shadowColor2";

			editorTemplate -l "Shadow Level" -addControl "rampPositionShadow";
			editorTemplate -l "Mid Level" -addControl "rampPosition1";
			editorTemplate -l "Highlight Level" -addControl "rampPosition2";
			editorTemplate -l "Highlight Level 2" -addControl "rampPositionHighlight";

			editorTemplate -l "Shadow Level Mix" -addControl "rampRangeShadow";
			editorTemplate -l "Mid Level Mix" -addControl "rampRange1";
			editorTemplate -l "Highlight Level Mix" -addControl "rampRange2";
			editorTemplate -l "Highlight Level Mix 2" -addControl "rampRangeHighlight";
			
			editorTemplate -l "Light Linking Enable" -addControl "enableLightLinking" "LightLinkingEnableChanged";

			editorTemplate -callCustom "LinkedLightNew" "LinkedLightReplace" "linkedLightObject";
			
			editorTemplate -l "Use Mid Color As Albedo" -addControl "enableMidColorAsAlbedo";
			
		editorTemplate -endLayout;
	editorTemplate -endLayout;

	AEdependNodeTemplate $nodeName;
	
	editorTemplate -addExtraControls;

	editorTemplate -endScrollLayout;
}

global proc string GetLinkedLightDropdownCommand(string $attrName, string $ctrlName)
{
	return "OnLinkedLightChanged(\"" + $attrName + "\",\"" + $ctrlName + "\")";
}

global proc UpdateLinkedLightsDropdown(string $attrName)
{
        $items = `optionMenu -q -itemListLong linkedLightDropdownCtrl`;
	if (size($items) > 0)
	{
		deleteUI($items);
	}

	$lightNames = GetAllLights();

	menuItem -parent linkedLightDropdownCtrl -label "";
	for ($lightName in $lightNames)
	{
		menuItem -parent linkedLightDropdownCtrl -label $lightName;
	}

	string $connections[] = `listConnections -shapes true $attrName`;
	string $value = "";

	if (size($connections) > 0)
	{
		 $value = $connections[0];
	}

	optionMenu -e -v $value linkedLightDropdownCtrl;
}

global string $g_dropdownList[];

global proc LinkedLightNew(string $attrName)
{
	global string $g_dropdownList[];

	rowLayout;
		$g_dropdownList[size($g_dropdownList)] = `optionMenu -label "Linked Light" linkedLightDropdownCtrl`;
		setParent ..;
	setParent ..;

	LinkedLightReplace($attrName);
}

global proc LinkedLightReplace(string $attrName)
{
	string $ctrlName = `control -q -fullPathName linkedLightDropdownCtrl`;

	$command = GetLinkedLightDropdownCommand($attrName, $ctrlName);
	optionMenu -edit -changeCommand $command linkedLightDropdownCtrl;

        UpdateLinkedLightsDropdown($attrName);
}

// Linked light dropdown array refresh - remove non existing controls (non existing drop downs which appear if you show and hide Hypershade for example)
global proc RefreshExistingControlList()
{
	global string $g_dropdownList[];

	string $dropdownList[];

	for ($ctrl in $g_dropdownList)
	{
		if (`control -ex $ctrl`)
		{
			$dropdownList[size($dropdownList)] = $ctrl;
		}
	}

	$g_dropdownList = $dropdownList;
}

global proc OnLinkedLightChanged(string $attrName, string $ctrlName)
{
	global string $g_dropdownList[];

	string $newLightName = `optionMenu -q -v $ctrlName`;

	string $connections[] = `listConnections -shapes true -plugs true $attrName`;

	if (size($connections) > 0)
	{
		disconnectAttr $connections[0] $attrName;
	}

	if ($newLightName != "")
	{
		$firstAttr = $newLightName + ".message";
		connectAttr $firstAttr $attrName;
	}

	RefreshExistingControlList();
	// update all linked light dropdowns
	for ($ctrl in $g_dropdownList)
	{
	 	if ($ctrl == $ctrlName)
			continue;

		optionMenu -e -v $newLightName $ctrl;
	}
}

global proc string[] GetAllLights()
{
	string $lightTypes[] = {"ambientLight", "directionalLight", "spotLight", "pointLight", "RPRPhysicalLight", "RPRIES", "RPRIBL"};
	string $lightNames[];
	
	for($lightType in $lightTypes)
	{
		string $lights[] = `ls -type $lightType`;

		for ($lightName in $lights)
		{
			$lightNames[size($lightNames)] = $lightName;
		}
	}

	return $lightNames;
}

global proc ShowAdvancedChanges(string $nodeName)
{
	string $nodeAttr = $nodeName + ".showAdvanced";
	$dim = !`getAttr $nodeAttr`;

	editorTemplate -dimControl $nodeName showMixLevels $dim;

	editorTemplate -dimControl $nodeName enable5Colors $dim;

	editorTemplate -dimControl $nodeName highlightColor $dim;
	editorTemplate -dimControl $nodeName midColor $dim;
	editorTemplate -dimControl $nodeName shadowColor $dim;

	editorTemplate -dimControl $nodeName rampPosition1 $dim;
	editorTemplate -dimControl $nodeName rampPosition2 $dim;
	
	editorTemplate -dimControl $nodeName enableLightLinking $dim;
	
	editorTemplate -dimControl $nodeName enableMidColorAsAlbedo $dim;

	UpdateRampFieldsEnable($nodeName);
}

global proc UpdateRampFieldsEnable(string $nodeName)
{	
	string $nodeAttr1 = $nodeName + ".showAdvanced";
	string $nodeAttr2 = $nodeName + ".showMixLevels";
	string $nodeAttr3 = $nodeName + ".enable5Colors";

	$dimMixLevels = !`getAttr $nodeAttr1` || !`getAttr $nodeAttr2`;
	$dim5Colors = !`getAttr $nodeAttr1` || !`getAttr $nodeAttr3`;
	$dim5ColorsMixLevel = !`getAttr $nodeAttr1` || !`getAttr $nodeAttr2`|| !`getAttr $nodeAttr3`;

	editorTemplate -dimControl $nodeName highlightColor2 $dim5Colors;
	editorTemplate -dimControl $nodeName shadowColor2 $dim5Colors;

	editorTemplate -dimControl $nodeName rampPositionShadow $dim5Colors;
	editorTemplate -dimControl $nodeName rampPositionHighlight $dim5Colors;

	editorTemplate -dimControl $nodeName rampRange1 $dimMixLevels;
	editorTemplate -dimControl $nodeName rampRange2 $dimMixLevels;

	editorTemplate -dimControl $nodeName rampRangeShadow $dim5ColorsMixLevel;
	editorTemplate -dimControl $nodeName rampRangeHighlight $dim5ColorsMixLevel;
}

global proc TransparencyEnableChanged(string $nodeName)
{
	string $nodeAttr1 = $nodeName + ".transparencyEnable";

	$dim = !`getAttr $nodeAttr1`;

	editorTemplate -dimControl $nodeName transparencyLevel $dim;
}

global proc LightLinkingEnableChanged(string $nodeName)
{
	global string $g_dropdownList[];
	string $checkboxName = $nodeName + ".enableLightLinking";
	
	$enable = `getAttr $checkboxName`;

	RefreshExistingControlList();
	for ($ctrl in $g_dropdownList)
	{
		optionMenu -edit -enable $enable $ctrl;
	}
}

global proc ConvertLegacyLightLinkedAttribute()
{
	string $toonMaterials[] = `ls -type RPRToonMaterial`;

	for ($toonMaterial in $toonMaterials)
	{      
		if (!`attributeExists "linkedLight" $toonMaterial`)
			continue;

		string $enabledAttrName = $toonMaterial + ".enableLightLinking";
		string $legacyAttrName = $toonMaterial + ".linkedLight";

		if (`getAttr $enabledAttrName` == 0)
			continue;

		string $lightName = `getAttr -asString $legacyAttrName`;

		string $linkedLightObjectAttr = $toonMaterial + ".linkedLightObject";

		$firstAttr = $lightName + ".message";
		connectAttr $firstAttr $linkedLightObjectAttr;

		deleteAttr $legacyAttrName;
		print("RadeonProRender: Legacy attribute " + $legacyAttrName + " converted!\n");
	}
}
